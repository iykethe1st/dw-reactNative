%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2006.i602.016.P.m009.c20.home appliance store flat-04.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/26/2021
%%BoundingBox: 0 0 450 303
%%HiResBoundingBox: 0 0 450 303
%%CropBox: 0 0 450 303
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 4 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2006.i602.016.P.m009.c20.home appliance store flat</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-02-26T00:23:39+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-02-26T00:23:39+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-02-26T00:23:39+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7vcWAGtErbW51F9USRdS&#xA;aVfrC2npCRqEcnFCpg9PYEGvicyL9PPavx+tHEFLy/57s9V81anFbXks+lQSCyjLQqkK3SkKyxyb&#xA;O/xd6EbjtSur8YxzCJO0xcQ50oROHaNTidyzfMxwnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWOa7oZ&#xA;1eaOL9I3unGKX1PUsJvRdqfsuSrVX2yjiolmnlonBWTkX4kDkxqTRRuffJ4+TGSvliHYq7FXYq7F&#xA;XYqtlliijMkrrHGv2nYhQPmTgJA3KYxJNDcrgQRUbg9DhQ7FXYq7FXYqkXmbzXDocljF9We8nvJ1&#xA;iMUUkUZjjb7Uz+q6Div45Vkzwh9Rq2/DpsmQExBICY3usabYyRR3U3ptMQEPFiu9aVYAha0NK5a0&#xA;Ui43SRFkQhkcBlYdCDuDiqQ6t5Tj1C7W4a8khVZFm4IAKuoIBZgRUAHpkZ2YGINX9zLGYxnxEXTy&#xA;3T9PNx5k0ezgvFtdNsNTjuoreGJVSQiUkF9y1X3/AGqcjyocxdPijCXF9UjtZczPlM41QiPJ7jmY&#xA;4LsVdirsVdiqg17bq5TlVl6gb/59Mgcguk8J5pXf+dPK+n6hBpt7qMMF/cisFqzD1WFaBuI3AJ2B&#xA;PfbCJhaTa2ura5QvBIsiqeLFSDRqA8TTod+mSQq4q7FXYq7FXYqkwhlku3ImZayPQeFGPuMxjzZo&#xA;2wR45J0Zy/2TU+9fnlmNEkZlrF2KuxV2KsP/ADL1Cez0N2hvjp7HiPrK8eS1P7PLbke1dtqZj5sv&#xA;CRtbm6LRS1EuGKceXbuO6shLyEsyKqy9KiQD4gQKU3GOCYkOINGfEccjE9Er1C5XXJNQ8uagLZop&#xA;o46QpJ+9Kkgv6qhqqAaUp2yZJMe7zRAiJtO9CvoLmz4Qmq29IqheI2ApQeGSx45RjUhTSM8chJBt&#xA;Mcml2KuxVRu3ZLdygbkQQpQVIJHXfwwSlW68N7XTyDzrbTza9CTznlYFbo+o0Q3jPGhBqCoU/DXv&#xA;mFkEMhJj6Z7cxfXz/Q7LBmyYcQ8Q8WOzy2Pv/tSePX4L7Vf8PXVk5lso0nZbmQD1YUZVUhkMu1fa&#xA;uVY8ktLHinIESP8ACP1kV8m2UY6uX7sHYdT+oE/a9XtfMWorbaTBbaRNcevJFBcTBlEUUXH45gx+&#xA;2Fp02zJw6rxOUSPPo4eXSeHzkNunVPNWYrpl2RIIT6TgSkV4kqQDSorl+SXDEnuDj448UgO8vO38&#xA;lXNppNtqsc4E6kSyHiQVUlfSoKnpuSffMKWUxxDIQ50cQllOMF6ZGxaNWJBJANVNV3HY+GbB1y7F&#xA;XYq7FUNqSSyafcRxEiV42VCK1qRTtU5GfIpHNhy+WvMSTSSwSiES1oi1AVS3IKtFFAO2a+OlkMhn&#xA;fPo5mTUiWEY6ojqhj5J1s3c140oa6mUIZmqWCgH4akGoFTQdsJ00uPjBbI60DEIcI2696feXdJ1D&#xA;StOmhUkzmVZJCfUblUUNGkLEmgH0bCm2ZspSO7hCid2RxF2iUuOLkDkPfvkwwK7Ch2KuxV2KpZD/&#xA;AL1N/wAZH/4kcxjzZom2/wB6rj5J/wAbZZj6oKKy1i7FXYq7FWPeavJ8XmGS0eS9uLX6rzHCBows&#xA;gkptJzjlrTjtSmVZMUZ8wC5Gn1WTDfAav3fp/Qp+VPImk+WdGudM05pQLt2luLiRzJK8jAKXZiB2&#xA;HQCmTiKaZStAad5caw82zah6RluLvitxIiziILStV5ho+wr8fyHifVQF7BFhNdJ0SaLWLm9ZZLSF&#xA;XdYYEdfTlQ7BmVSaAbkDbr7YZSMjZ6efNhjxDGDVerfly8k/xZOxV2KuxV5R548m+fdU1WSHTILZ&#xA;dIXiVnaQtcSMVoxqZIylK0A9uu+2GdKLsXfvdhj1pEeEgEHoQq+V/wAmF0+6W6vXgimYD6y1sZJJ&#xA;JOhZTNKFfjUZSdFOZ9crj3Ob/KmLHCsUKlXP8WzC98k2M5hS3u7uytUmSee2t55EWXgahGIavFv2&#xA;h3H35kYtJHGbjYHd0ddk1s8gqQBPfW6bapo+marAtvqNsl1ArCRY5BVQ69Gp4jMoFw6VZbCzlsjY&#xA;yRK1oUEZhP2eAFAuKrdP06x060SzsYVt7WPaOFNlUeAHbFUTirsVdirsVdirsVdirsVdirsVdirs&#xA;VUns7R2LPBGzHqxVSfvpg4Qm18cUUQ4xoqL1ooAH4YgUhdhV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxVhXnDzVqGlazHaQSSCKRIdokjfi0ryKWfkDxRRGCx7Vwcyd+jMDZjVp+Z2&#xA;qXUUrpdemYnaMJKIVZivH7IEZr9v8DiYkdRytBIFbHcvVbSQyWsMhYOXRW5ilGqAa7bb4QxKrirs&#xA;VdirsVYX+bXmTXvL3lT9I6H8V+LiKMR+n6oZHJDVWjHbrUYYgEgE0nokHkbzR511/QBqOo6nDYXB&#xA;lkj+rvHHGeKdDxkj5b5HJUTQLKIsbhl3kLWr/WNHlu713aT12RFkREZUCKRUIAOpOEiiRdsejJcU&#xA;OxV2KuxV5p+Z/wCdEXkXV4dNbSv0g89slyrC49E/HJInHj6Umw9Ota5djxcQu0WxyT8/dXuNNtdS&#xA;s7C1tUukZktJjJcOCkjxk+orQCh4V+xkoYLvdJKa+X/z0jOly3fmGyIcTGOH9HqKEKiseSzSg1q/&#xA;Y/dgOA3QV6XoesWus6Ra6paq6W92gkjSUAOAdqMFLCvyOUkUaVHYFdirsVdirH9S866dZ38thb28&#xA;+pXUCo9wloYCI/UZ1AYyyxDlWI1XqNstjiJFtWTNGHNJNW85+Yrm/wBGm8s2RvtPF61trtkyrHch&#xA;eJVikkzpDSIur/CW50KhhQ5jZcghMQPMuRjhxwMwzvLGDsVdirsVcTTc9MVYt5Y1u9uG1bUtT1K3&#xA;bSWmQ6ahi+rejAw4qWd3JcSfCQWA+KvsBjafUDJxf0TTkZ8IhXmLZQZECGQsAgHItXanWtcyXGJp&#xA;h3lvzX5lvvN1/pN/p6fotIjPZ6jCjx8aOF9GUO8gL79RTpXjvtXjmZAmqo18nKzYoRAqVyoGvekP&#xA;5n+dtJ8s61TUWmUXdnD6bQorkCOWavV4zU8+3hl0ImVgeTimO4Pdf3ME1KNNV1iw8x22uXttY3H1&#xA;edNOWIDmiBQwcicbPx3HH78nOZquEJwxiBUpdPm+hrSv1SGux9Na033oMqClVxV2KuxV2KsM/Nex&#xA;e/8ALkFoknomW7j/AHvHnSiOT8NVrsD3wcXCQatnjAJomnlo8reY0iCW+qmNY0jJQsyiiAIQKt+0&#xA;zDYZZGQJsxSduResflpBNb6FPbzSCaaG5aOaUGvKRIo1fep/aGVgbljJluFi7FXYq7FWD/mV5P8A&#xA;Lmpafca1rSs8enQ+qTDb2r3Hpw8m4LJKnPiSxPEvxrg4LLKMqeS695j/AChurYG9sNRgjjUJH9Wt&#xA;NNg4ryL8UEUigVZiTQZb+Vn3p8RU0LzF+T+vX1h5btrHUY2vLlVt2ktLJFWWTivJnjkLgHgtafdk&#xA;ZYZRF2vG+g9J02LTNOgsISDFbrwjoiRgLUkALGFUU6bDIhiSi8UOxV2KoXVb9NO0y81CRGkSzgku&#xA;HjT7TCJC5C17mmGIs0r5sh8y+c7nWL3XLK2jgSQNJqqLy9MKSXXispLbHmTRt/boM+WP00DTRLwz&#xA;IcYv8eSLtfz71OxaOOPQZbuKPrI7NAzHkTsoSbiP9kc5/wDIZOLiN/J6I48JiAJRj8Q9/wDLOupr&#xA;2h2urR2720d2vNIpShYCtP2CwzYkU6U80zwIdirsVSzzRcta+WtVuUBZ4rOd0VaciwjbiFr3J2GE&#xA;c1eS/k9pnmjXfL0thryi0i0toUspWUPLKAHp6i8v91cV4Ej8RXMOekjHKcmKXCTudrcs5wcfBkjx&#xA;D309Mk8r2sFjI78ri5B9R5A7Qg0p1UFk2A8N/pw5MRvj5z8vT+tjhyADwxtj5b+r9SVeRdesdV1O&#xA;6aFy1wY+brwKhV5AUqTv27ZLTaw5RUj6uewbNb2SdNLjr0nbndlCee/JT+Y9clMcVrJLDZRLE92C&#xA;eDPJNuoCPt8Iy3+Lfk40TsxVvyj8wqDKjaYscTkjZi3BKjiP3I6U2yzix1yN+9lb2Sw/3ht9iP3S&#xA;bMST9kdSd8iGoq+FDsVdirsVYp+Y87QaTZyqCSLtR1p1hlyEzTOAt53cXqXChZoQ4HQFj7e3+SPu&#xA;yAykNnhvQfyyKnRLrinAfXHoo6bxxtX7zk4SvdrmKLLsmwdirsVdiqQefra6ufJWt29pC9xcyWcq&#xA;wwRgs7sVNFUDqThiaIKvj7zD5Z852pS51nSrnT4XbhCbmMwpXrxUvxBNMzTnj3oESyX8s/IPnW38&#xA;7+XtRn0O9jsEvIJnumhcRCPkG586U403rlWXJExoJAp9d5jK7FXYq7FUj89Syw+Tdalido5Es5ij&#xA;oSrA8DuCMnj+oIIsPn/QtTe90XXLXUb15pWgD2sU0zFyYkkkbgGappxBan05kaqUhwiI5yHyG5Y4&#xA;sMBPiNARjL4k7D72J5lpfUH5Yf8AKBaN/wAYD/xNs12b6yseTKMqZOxV2KpR5xMY8pa0ZNkFjckn&#xA;odompTY716YDyTHmxb8pDK1revJ9pktyx/yqOT+vK8fVsy9Gc34jawuRISsZicOymjAcTUg+OSyG&#xA;om+5GK+MV3sG/L3QYNJ1JpnEiS3tsDb8iChj5Ant12BzU9nXGdS/ijYd92vqTlx7VUZb+9m8lgr3&#xA;TXKyvHI6JG/HiQVQsy/aVv8AfhzcGLzwktOnkoyG5l4tWopH+11/YwcKeJFIgRFRfsqAB8hkmLeK&#xA;uxV2KuxVL9c0O01mzW1umdY1cSAxkBuQBHcMP2sEo2mMqSL/AJVnoP8Av+6/4OP/AKp5Dwwz8Up7&#xA;oeh2mjWbWtqztGzmQmQgtyIA7BR+zk4xphKVphhQ7FXYq7FXYqkvmXyX5a8zJAmuWf11Lckwo0kq&#xA;KpbYmkboK/PGkg0mWnafaadYw2NmhjtbdQkMZZn4qOg5OWbbtvihEYq7FXYq7FULqmm22p6bc6fd&#xA;cvq93G0UvE0bi4oaHDE0bVith+Ufk6xhuooY5iLuMxSO8gLBSCDwNNq8su/MSapYRIgnogv+VG+R&#xA;v5br/kd/zbj+Zkz4WaaNpFno+l2+mWfIW1qvCLmeTUqTufpyqUrNlIFI3IpdirsVQ2qadBqWm3Wn&#xA;3BIgu4ngkK05BZFKkryDCortUYqCk3lPyVa+WjMLXUb27jnA5RXjxSKCOhXhHG2w2647dAkknmme&#xA;u6PFrOmTadNcXFrFPQSS2kphl491Ei7gHvTEgHY7hFkbg0UPP5X0yebSppGn56MALPjPIgNAq/vA&#xA;pAk2QfayPCO7ky4zvvzTfJMXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp1LXxYaxp9hLaStBf81W+UoYo5FpxRxy5/F40p+N&#xA;IyyRjQJonk2QxSkCQNhzTbJNbsVdirsVdiqXaxr2n6RbS3d+/pWsPEyzEMaciFGyhmO7DtkbJNAJ&#xA;pGW9zHOqvGeSOqujDoVbcHGMrUhVySHYq7FXYq7FUJq+oppumXN86GQW8ZcRKQC5A2UE7bnbIzmI&#xA;gk8gzx45TkIx5lZY6qk2n29zdoLOeaJZZLV3VnjLLUqSvWntg8SNXaDAg0su9ctrbV7TS3huGmvA&#xA;zRzJEzQLxBNHk+yCeJ2++m2T270AEpjih2KuxV2KqU9zFAF9Q05Gij6K4DKlUjqVsBWprsABQkkm&#xA;gA3wcYTTjqMYFWjdVHVjxoB47EnHiWkVkkOxV2KuxVa7qnGv7RCj5nFXF1EgT9pgWHyUgH/iWKrs&#xA;VdiqDl1rSIpo4Zb2BJpuXoxNIod+Aq3Ba1ag60yPEKvuTRY35uv2v7KJbZHFjDKslzdspRaLUUXl&#xA;SvXNdqMxyACAPD3u20eOOImUyOKth+kpx5V1iDUtLQpMs0tvSKYqwY1A2JpmfjlY3dblhR/H4+0p&#xA;xljU7FXYq7FUp1S0s755LS7hS4t3KCWGRQymlGFQfoOUSJEtmQRcZSGUxxx7JF+7iSgFE2CitAOu&#xA;2GJq01bCNCWW4/M2+vrO/mSCWJ/r1jI/qxusaxxpRQxWNkkOxFfhr41zE03aXi5pY62A279qv73Z&#xA;ars7wsEcnUn77P6HoWbF1TsVdirsVeR/85A6wEstL0lJQrSu91MgNCFjHCMsPAlmp8sw9WTsA9n7&#xA;IYoxlkyyoAARBPnufuDIfLXlgTaDpWpX+oFg9rBOZJB8fxor/FIzHuaYIRyCG86gfIfe6DtOGGWq&#xA;nw4/WJkbE1segDzHzxe+br/zoy2t5cRxQSKmlSo0kccSlFAcUpRmG7kfqzLx9oaSMRxSjxVyP1fL&#xA;m435LPZAB/Q9+0ea7m0mzlvABdyQxtPQUHMqC2wrTfthEhIWORcaUeEkdyLwsXYq7FUv1k8IRMzB&#xA;IoQ7yyMQFVVFSSSrCgAyE2cImRobkvLNI89Lr+v8xFdQ2enszQGJgIpQ1FHrr+6U92UHp99ddPWc&#xA;MhfL4fseo1vs6cGEHiBmefl7qu2cTapa/V2YvH8SkcVCMwJHT4ZGzPx/vBt+PteVzSGL6v7WvIOs&#xA;3GopqH1jUJb4i4LWvrJDGUgKLRf3SpUhia1r23PXLRjnEervKcmXHIgRFekFlmLF2KuxVD39qtzB&#xA;wLyIQQytExRqjpuvzwHkkIWw08297IxluJQIwIzNIzr8Rq1K9/hGRhfVJQFz5pKeaodKjMBs1Xhf&#xA;SyessiXElPQRCIzE3OtN2G/vsR4g4uFyRoshx8fT3i6HM15V+nkl3nzznrOiixj0CzttUurl2ZoJ&#xA;J+DuiUrHCqg1ketEqaV23JxGaPEI97UMEjEy7mO+bPMujWXmmy0xrP154qKbmWZg0Yl+H4Gcmm25&#xA;6Dt75PHpuKBN/gNZnRR35rSpaflnJBHULcSxRip5HeX1Tua/yZZpI7hEig/+cegjeVNSlH2zqUiH&#xA;5JBDT9Zy7VfUPcxD1LMZLsVdirsVSa69E6hLzl4HmopyA/YXscx5/UzHJVhjtm1Aw8hMrwtyUlSK&#xA;Bl6gUxiATRTxEbhifkSwMfmfULskkyJMp2HE1mWpFOm6nbNJ2VgMdROXeD/ug9F2tn4tNCPcR/uS&#xA;9Azo3mXYq7FXYq8A/wCckViTzNoLcRzuLO4Rz4iGVGUfR6jZOCknk9e8izR3/kbQ3kUOpsoEZWAI&#xA;LRoEJoR4rlc4g7FkJEGwd3n/AOZN+bHzYJiF9MPGp5bAJ6KlqdN6VpnE63HxdoT2uoivlEfpeo0U&#xA;+HSxrqT95ew527yrsVdirsVef/ntO0H5b3ziThWe0UgEjkHuY1pt867+GEAHYs8eSUJCUSYyHUJL&#xA;+WFvap+U880YJuJrljcuxqS6yoq08Bwp+OUZsUYxNBys2vzZ5ROSVmIq/mU3mlhtvKN/eugZrdXe&#xA;tPiooBpXKMcOKg0SO6XfkRc/W7LUpDbRw+g0aB4hxDM/JnJUbdFQZt9TtQcWMBxcXV6pmK2OxV2K&#xA;pX5m1eLR9Il1GaYQQwsnqSlS1A7BBsqud2YDpjRO0eaQkXlHzXB5iury2h1IziBFZhGjRMnJtqFo&#xA;k608cjPFOqlt7mUZAGxv73nXmNm0r89NJsrN2FtqNxbfW4mJfmTGzblqmvJA1cqGkhz6jzLsJdsZ&#xA;zi8Kxwb9B1eg+bdEsm1/SZ4FW3nMymRkjSr/ALxSNyPtE9+uaftKcsefGMcfqO9e8M9JKUsU7OwH&#xA;6E21Dydpt9fxX9xHC93DT0pnhVnFNx8Vex3+ebsRkBQOzq7SX8xvKPmPzBo1ppGmLZtbxSCeaa5n&#xA;lgfmtVVUWOGdeNHO5Phtk4mUfpO6YkXuLC78pfJGqeUdAubLU3he8ubpp2+rSPLHx4qq/E8cDV+H&#xA;ccfpycskpblia6M3yKHYq7FXYqgLi0mNy0ixq6sQTUgdABTf5ZVKBJZArlt51la4jjRJFidI42NA&#xA;WJBFSoNB8PhhhEg2pKV+X9I1qyuLdrxbQRraOty0DSMzXMk3qHiHVf3YBO5NT4DIYtNGBsfje2/N&#xA;qTMUe/8ARTIcvcZ2KuxV2KvLvzc/KjVPOOtaNqemzwxvYRyw3C3ErxAo5BXgEhm5E/FWpFNuuNno&#xA;kV1/H2My8jaLqWieXLbSb5Ya2YKRPDK8wZCS1WLxxUNWIoK7fdgHmsiCdkh82/l5feZtUae7e3jt&#xA;FdTEqNL6hVVIDN8IHL26UzX5ezrzHNCcoTMeE0Advi5OPXTjAYzCMog3zP6GeIpVFUnkQACx7++b&#xA;ACg4xLeFDsVdirFfzN8nT+b/ACfdaJbzi3nleGWJ2PFOUMiuAzBJCBt2XHfokV1S3yb5F1nQ/Kd5&#xA;oU72x9aUTxSJLI/xErzDVijoKRilBlc4kxI6suIXtyTT/DF/+hZ7Bvq8jTHo7NwIJFa/AfDwyoYT&#xA;VWnjo2reUPL97owu0nis4YpTGYVslZalFKsZKqu52O3vluPHw9SfenLm4+gHuZFljU7FXYqgda0a&#xA;x1nTZdOv4/VtJuPqR1Za8GDLupVtmAOxxsjcKl3lryToXl2e4n0yH0nugqynlI9QpJH22fx7YTKR&#xA;5m1SrVfy0tr3z5ZecIr0w3do6ubdo/UR+MRhO/Nafu2NNtjvjap/rGiy6jKGE6wiOOkJ9Ms6y+oj&#xA;8+XMA7R0Ap9PbKMuCMyCen7P1ORh1Bxggdf1EfpTXLnHdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqm9zbxmkkqIa0ozAb0B7/PA&#xA;SAtLfr1l/wAtEf8Awa/1wcQ700VVHR15IwZT0INRttkkN4q7FXYq7FXYqs9Q+t6dNuPKv00xVfir&#xA;sVdirsVdiriQOppirRdB1YD6cFhWhJGdgw+8Y2FXYVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VS7UDCk9TxVnUEnYE0qMpyMggYbuOTlUGPj/AD0FflQnKrZUnVqoS2iUAKAi7DYdMyo8mBVcKHYq&#xA;7FXYq7FUD+hNI9b1vqkXq8/U58RXlXlWvzzF/J4eLi4I8V3fCLvvb/zGSq4pV7yjsymh2KuxV2Ku&#xA;xVCamkjwoscaSkuKpIaKRQ9fhb9WV5eTKLDPN/k2z11YEvYFT6sW4paSsoHMCtR6JHYZXjyyhyZE&#xA;AprZW9wskHGIcY2Uf3x247bjh75XEbpLKczGp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5bd/&#xA;nattqt5YtpZZLO4lt3mEn2jE5QsFp34+OXR08iAbCkhFaR+cdvq811BZabPJPbW73IjChjIEZV4I&#xA;FYksS47ZDJilGrI3Kjdl3lXzBc63Yvc3FhNpzo/AQXCMjkdeVGoaHIEUasH3KnWKuxV2KuxVZM7J&#xA;EzqpYqKhRSp++mCRoKGPz6p5lj1MJ9UiGnmCtakzet9B4cPprlHiGvNnQT+3kaSBJGBVmUEqeo+7&#xA;L4mwwKphV2KuxV2KqF4zLDyUVYGoHuAchk5JD59/MrXbmbzZd21xM3oWTKlrDUlApRW5AdCz15Mc&#xA;2GkiBAEMZc3of5XajLeaFbvJK8rLI0dHFOCgKyqGJPIDlt4Vp2zB1UQMmzOPJ6NhYuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KvAPMH5bec7zV9RnsrCtvc3dxKknNBVZJWYbVr375l49TERA35IMU&#xA;z/Lj8v8AzTomvTXmpWbRW72rwqyMGPNpI2H2a02Q75RqsonGhfNlEU9a0WIxROnFlCcV+IU3Fa5j&#xA;YhSZJllrF2KuxV2KrJjSJj7ZGXJQl15cQl1+Lt4HMclsTC3NYIz/AJIzIjyYFUySHYq7FXYqo3Pq&#xA;cFMahiGBIJI2ofAHITGyQxDzD5L0XWZ0uLzTVmlXZWpcKwHWnKNYyV9jXIQyTj9LI0Uy0fTPqKQ2&#xA;9taLBDFQIiq6Iq1qaAp3O5qanI+omyppkeZDB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:918e6b3c-74d7-6144-85ae-dda46fc4ba23</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:918e6b3c-74d7-6144-85ae-dda46fc4ba23</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b750fab7-8e02-411b-a55a-668d8b9b9a79</stRef:instanceID>
            <stRef:documentID>xmp.did:c921b64d-f47d-f84d-afcc-04db1004097e</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8f47f252-11c2-114a-a9f7-7e952d1153f7</stEvt:instanceID>
                  <stEvt:when>2020-05-19T16:11:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95d123d8-246c-334b-beea-0cdb74470b38</stEvt:instanceID>
                  <stEvt:when>2020-06-30T17:46:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c921b64d-f47d-f84d-afcc-04db1004097e</stEvt:instanceID>
                  <stEvt:when>2021-02-25T17:45:23+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:918e6b3c-74d7-6144-85ae-dda46fc4ba23</stEvt:instanceID>
                  <stEvt:when>2021-02-26T00:23:39+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>303.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -303 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 303 li
450 303 li
450 0 li
cp
clp
316.131 108.368 mo
316.131 234.158 li
316.131 235.761 314.819 237.073 313.216 237.073 cv
218.64 237.073 li
217.037 237.073 215.726 235.761 215.726 234.158 cv
215.726 108.368 li
215.726 106.765 217.037 105.453 218.64 105.453 cv
313.216 105.453 li
314.819 105.453 316.131 106.765 316.131 108.368 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.945098 .933333 .866667 rgb
f
256.723 105.453 mo
256.723 132.782 li
222.946 132.782 li
222.946 105.453 li
256.723 105.453 li
cp
1 .988235 .933333 rgb
f
316.13 132.782 mo
215.725 132.782 li
215.725 134.602 li
316.13 134.602 li
316.13 132.782 li
cp
.639216 .580392 .443137 rgb
f
316.13 134.602 mo
215.725 134.602 li
215.725 138.061 li
316.13 138.061 li
316.13 134.602 li
cp
.792157 .74902 .639216 rgb
f
222.168 110.557 mo
220.527 110.557 219.192 111.891 219.192 113.532 cv
219.192 124.481 li
219.192 126.122 220.527 127.457 222.168 127.457 cv
243.952 127.457 li
245.593 127.457 246.928 126.122 246.928 124.481 cv
246.928 113.532 li
246.928 111.891 245.593 110.557 243.952 110.557 cv
222.168 110.557 li
cp
243.952 127.799 mo
222.168 127.799 li
220.339 127.799 218.85 126.31 218.85 124.481 cv
218.85 113.532 li
218.85 111.703 220.339 110.215 222.168 110.215 cv
243.952 110.215 li
245.782 110.215 247.27 111.703 247.27 113.532 cv
247.27 124.481 li
247.27 126.31 245.782 127.799 243.952 127.799 cv
cp
f
251.475 111.383 mo
250.64 111.383 249.96 112.062 249.96 112.897 cv
249.96 113.733 250.64 114.412 251.475 114.412 cv
252.311 114.412 252.99 113.733 252.99 112.897 cv
252.99 112.062 252.311 111.383 251.475 111.383 cv
cp
251.475 114.754 mo
250.451 114.754 249.619 113.921 249.619 112.897 cv
249.619 111.874 250.451 111.041 251.475 111.041 cv
252.499 111.041 253.332 111.874 253.332 112.897 cv
253.332 113.921 252.499 114.754 251.475 114.754 cv
cp
f
251.475 117.715 mo
250.64 117.715 249.96 118.395 249.96 119.23 cv
249.96 120.065 250.64 120.745 251.475 120.745 cv
252.311 120.745 252.99 120.065 252.99 119.23 cv
252.99 118.395 252.311 117.715 251.475 117.715 cv
cp
251.475 121.087 mo
250.451 121.087 249.619 120.254 249.619 119.23 cv
249.619 118.206 250.451 117.373 251.475 117.373 cv
252.499 117.373 253.332 118.206 253.332 119.23 cv
253.332 120.254 252.499 121.087 251.475 121.087 cv
cp
f
251.475 124.048 mo
250.64 124.048 249.96 124.727 249.96 125.562 cv
249.96 126.398 250.64 127.077 251.475 127.077 cv
252.311 127.077 252.99 126.398 252.99 125.562 cv
252.99 124.727 252.311 124.048 251.475 124.048 cv
cp
251.475 127.419 mo
250.451 127.419 249.619 126.586 249.619 125.562 cv
249.619 124.539 250.451 123.706 251.475 123.706 cv
252.499 123.706 253.332 124.539 253.332 125.562 cv
253.332 126.586 252.499 127.419 251.475 127.419 cv
cp
f
282.2 111.14 mo
281.365 111.14 280.685 111.819 280.685 112.654 cv
280.685 113.49 281.365 114.169 282.2 114.169 cv
283.035 114.169 283.715 113.49 283.715 112.654 cv
283.715 111.819 283.035 111.14 282.2 111.14 cv
cp
282.2 114.511 mo
281.176 114.511 280.343 113.678 280.343 112.654 cv
280.343 111.631 281.176 110.798 282.2 110.798 cv
283.224 110.798 284.056 111.631 284.056 112.654 cv
284.056 113.678 283.224 114.511 282.2 114.511 cv
cp
f
282.2 117.472 mo
281.365 117.472 280.685 118.152 280.685 118.987 cv
280.685 119.822 281.365 120.502 282.2 120.502 cv
283.035 120.502 283.715 119.822 283.715 118.987 cv
283.715 118.152 283.035 117.472 282.2 117.472 cv
cp
282.2 120.844 mo
281.176 120.844 280.343 120.011 280.343 118.987 cv
280.343 117.963 281.176 117.13 282.2 117.13 cv
283.224 117.13 284.056 117.963 284.056 118.987 cv
284.056 120.011 283.224 120.844 282.2 120.844 cv
cp
f
282.2 123.805 mo
281.365 123.805 280.685 124.484 280.685 125.32 cv
280.685 126.155 281.365 126.835 282.2 126.835 cv
283.035 126.835 283.715 126.155 283.715 125.32 cv
283.715 124.484 283.035 123.805 282.2 123.805 cv
cp
282.2 127.176 mo
281.176 127.176 280.343 126.343 280.343 125.32 cv
280.343 124.296 281.176 123.463 282.2 123.463 cv
283.224 123.463 284.056 124.296 284.056 125.32 cv
284.056 126.343 283.224 127.176 282.2 127.176 cv
cp
f
275.627 123.558 mo
257.991 123.558 li
256.668 123.558 255.585 122.517 255.585 121.244 cv
255.585 112.814 li
255.585 111.542 256.668 110.5 257.991 110.5 cv
275.627 110.5 li
276.95 110.5 278.033 111.542 278.033 112.814 cv
278.033 121.244 li
278.033 122.517 276.95 123.558 275.627 123.558 cv
cp
.639216 .580392 .443137 rgb
f
275.246 123.588 mo
258.295 123.588 li
257.024 123.588 255.982 122.547 255.982 121.274 cv
255.982 112.844 li
255.982 111.571 257.024 110.53 258.295 110.53 cv
275.246 110.53 li
276.517 110.53 277.559 111.571 277.559 112.844 cv
277.559 121.274 li
277.559 122.547 276.517 123.588 275.246 123.588 cv
cp
.792157 .74902 .639216 rgb
f
275.309 111.271 mo
275.309 122.894 li
257.383 122.894 li
257.383 111.271 li
275.309 111.271 li
cp
.227451 .223529 .34902 rgb
f
269.453 122.095 mo
269.453 112.209 li
274.396 112.209 li
274.396 122.095 li
269.453 122.095 li
cp
.4 .392157 .545098 rgb
f
258.354 122.095 mo
258.354 112.209 li
268.69 112.209 li
268.69 122.095 li
258.354 122.095 li
cp
f
269.453 116.738 mo
269.453 114.474 li
274.396 114.474 li
274.396 116.738 li
269.453 116.738 li
cp
.466667 .466667 .619608 rgb
f
258.354 116.738 mo
258.354 114.474 li
268.69 114.474 li
268.69 116.738 li
258.354 116.738 li
cp
f
243.333 110.532 mo
243.229 110.778 li
242.75 111.795 241.714 112.502 240.521 112.502 cv
224.013 112.502 li
222.82 112.502 221.783 111.795 221.305 110.778 cv
221.2 110.532 li
243.333 110.532 li
cp
.792157 .74902 .639216 rgb
f
256.553 125.49 mo
256.333 125.49 256.154 125.67 256.154 125.89 cv
256.154 127.057 li
256.154 127.277 256.333 127.457 256.553 127.457 cv
260.403 127.457 li
260.624 127.457 260.803 127.277 260.803 127.057 cv
260.803 125.89 li
260.803 125.67 260.624 125.49 260.403 125.49 cv
256.553 125.49 li
cp
260.403 127.799 mo
256.553 127.799 li
256.144 127.799 255.812 127.466 255.812 127.057 cv
255.812 125.89 li
255.812 125.481 256.144 125.149 256.553 125.149 cv
260.403 125.149 li
260.812 125.149 261.145 125.481 261.145 125.89 cv
261.145 127.057 li
261.145 127.466 260.812 127.799 260.403 127.799 cv
cp
f
264.845 125.49 mo
264.625 125.49 264.446 125.67 264.446 125.89 cv
264.446 127.057 li
264.446 127.277 264.625 127.457 264.845 127.457 cv
268.696 127.457 li
268.916 127.457 269.095 127.277 269.095 127.057 cv
269.095 125.89 li
269.095 125.67 268.916 125.49 268.696 125.49 cv
264.845 125.49 li
cp
268.696 127.799 mo
264.845 127.799 li
264.437 127.799 264.104 127.466 264.104 127.057 cv
264.104 125.89 li
264.104 125.481 264.437 125.149 264.845 125.149 cv
268.696 125.149 li
269.104 125.149 269.437 125.481 269.437 125.89 cv
269.437 127.057 li
269.437 127.466 269.104 127.799 268.696 127.799 cv
cp
f
273.138 125.49 mo
272.917 125.49 272.738 125.67 272.738 125.89 cv
272.738 127.057 li
272.738 127.277 272.917 127.457 273.138 127.457 cv
276.988 127.457 li
277.208 127.457 277.387 127.277 277.387 127.057 cv
277.387 125.89 li
277.387 125.67 277.208 125.49 276.988 125.49 cv
273.138 125.49 li
cp
276.988 127.799 mo
273.138 127.799 li
272.729 127.799 272.396 127.466 272.396 127.057 cv
272.396 125.89 li
272.396 125.481 272.729 125.149 273.138 125.149 cv
276.988 125.149 li
277.397 125.149 277.729 125.481 277.729 125.89 cv
277.729 127.057 li
277.729 127.466 277.397 127.799 276.988 127.799 cv
cp
f
293.91 124.724 mo
290.871 124.724 288.398 122.251 288.398 119.211 cv
288.398 116.171 290.871 113.698 293.91 113.698 cv
293.91 114.04 li
291.059 114.04 288.74 116.36 288.74 119.211 cv
288.74 122.062 291.059 124.382 293.91 124.382 cv
293.91 124.724 li
cp
f
307.388 124.724 mo
304.349 124.724 301.876 122.251 301.876 119.211 cv
301.876 116.171 304.349 113.698 307.388 113.698 cv
307.388 114.04 li
304.537 114.04 302.217 116.36 302.217 119.211 cv
302.217 122.062 304.537 124.382 307.388 124.382 cv
307.388 124.724 li
cp
f
308.118 124.724 mo
308.118 124.382 li
310.97 124.382 313.29 122.062 313.29 119.211 cv
313.29 116.36 310.97 114.04 308.118 114.04 cv
308.118 113.698 li
311.158 113.698 313.631 116.171 313.631 119.211 cv
313.631 122.251 311.158 124.724 308.118 124.724 cv
cp
f
308.289 126.474 mo
307.948 126.474 li
307.948 112.209 li
308.289 112.209 li
308.289 126.474 li
cp
f
294.521 124.724 mo
294.521 124.382 li
297.372 124.382 299.691 122.062 299.691 119.211 cv
299.691 116.36 297.372 114.04 294.521 114.04 cv
294.521 113.698 li
297.56 113.698 300.033 116.171 300.033 119.211 cv
300.033 122.251 297.56 124.724 294.521 124.724 cv
cp
f
294.691 126.474 mo
294.35 126.474 li
294.35 112.209 li
294.691 112.209 li
294.691 126.474 li
cp
f
256.893 237.073 mo
256.893 138.061 li
223.116 138.061 li
223.116 237.073 li
256.893 237.073 li
1 .988235 .933333 rgb
f
304.51 236.951 mo
228.182 236.951 li
228.286 236.706 li
228.765 235.689 229.802 234.982 230.994 234.982 cv
301.698 234.982 li
302.89 234.982 303.927 235.689 304.406 236.706 cv
304.51 236.951 li
cp
.792157 .74902 .639216 rgb
f
316.13 223.818 mo
215.725 223.818 li
215.725 224.683 li
316.13 224.683 li
316.13 223.818 li
f
269.827 223.4 mo
265.448 223.4 261.064 222.631 256.893 221.109 cv
256.893 186.97 li
292.207 156.301 li
296.94 161.751 li
310.611 177.492 309.197 201.103 293.784 214.488 cv
286.892 220.473 278.368 223.4 269.827 223.4 cv
.901961 .882353 .784314 rgb
f
256.893 221.109 mo
251.008 218.961 245.548 215.316 241.125 210.223 cv
236.393 204.773 li
256.893 186.97 li
256.893 221.109 li
.952941 .933333 .847059 rgb
f
304.091 182.793 mo
304.091 203.641 287.192 220.54 266.346 220.54 cv
245.5 220.54 228.6 203.641 228.6 182.793 cv
228.6 180.323 228.838 177.911 229.29 175.574 cv
232.659 158.182 247.967 145.047 266.346 145.047 cv
284.724 145.047 300.033 158.182 303.401 175.574 cv
303.853 177.911 304.091 180.323 304.091 182.793 cv
cp
.792157 .74902 .639216 rgb
f
302.047 182.793 mo
302.047 202.51 286.063 218.494 266.346 218.494 cv
246.629 218.494 230.646 202.51 230.646 182.793 cv
230.646 163.076 246.629 147.093 266.346 147.093 cv
286.063 147.093 302.047 163.076 302.047 182.793 cv
cp
.945098 .933333 .866667 rgb
f
294.521 182.793 mo
294.521 198.354 281.906 210.968 266.346 210.968 cv
250.786 210.968 238.172 198.354 238.172 182.793 cv
238.172 167.233 250.786 154.619 266.346 154.619 cv
281.906 154.619 294.521 167.233 294.521 182.793 cv
cp
.792157 .74902 .639216 rgb
f
292.24 176.19 mo
295.887 190.492 287.25 205.041 272.948 208.688 cv
258.646 212.334 244.097 203.697 240.45 189.395 cv
239.491 185.632 239.382 181.855 240.005 178.26 cv
241.742 168.195 249.205 159.587 259.743 156.9 cv
270.282 154.213 280.955 158.196 287.3 166.201 cv
289.568 169.059 291.281 172.427 292.24 176.19 cv
cp
.4 .392157 .545098 rgb
f
287.3 166.201 mo
285.563 176.266 278.1 184.873 267.561 187.561 cv
257.022 190.248 246.349 186.264 240.005 178.26 cv
241.742 168.195 249.205 159.587 259.743 156.9 cv
270.282 154.213 280.955 158.196 287.3 166.201 cv
cp
.466667 .466667 .619608 rgb
f
280.697 199.757 mo
284.529 193.35 285.906 185.476 283.915 177.67 cv
282.873 173.58 281.01 169.92 278.545 166.811 cv
275.421 162.872 271.336 159.829 266.734 157.949 cv
273.615 158.235 280.012 161.546 284.235 166.874 cv
286.237 169.398 287.747 172.368 288.595 175.691 cv
290.931 184.852 287.553 194.13 280.697 199.757 cv
cp
.552941 .552941 .717647 rgb
f
260.706 152.479 mo
253.145 154.484 246.177 159.337 241.608 166.556 cv
239.213 170.337 237.718 174.387 237.064 178.461 cv
236.235 183.623 236.76 188.81 238.533 193.504 cv
233.956 188.358 232.023 181.315 233.146 174.334 cv
233.677 171.027 234.89 167.74 236.835 164.668 cv
242.198 156.197 251.632 151.737 260.706 152.479 cv
cp
1 .988235 .933333 rgb
f
299.822 181.089 mo
299.822 185.124 297.175 188.396 293.91 188.396 cv
290.646 188.396 288 185.124 288 181.089 cv
288 177.053 290.646 173.782 293.91 173.782 cv
297.175 173.782 299.822 177.053 299.822 181.089 cv
cp
.945098 .933333 .866667 rgb
f
311.282 246.25 mo
309.49 242.202 303.621 238.772 292.812 235.455 cv
283.498 232.597 271.875 230.198 259.57 227.658 cv
246.431 224.946 232.845 222.141 222.194 218.712 cv
210.467 214.936 203.971 210.936 202.336 206.483 cv
200.452 201.348 200.637 196.844 202.889 193.097 cv
205.672 188.463 211.133 185.684 215.677 184.091 cv
215.677 181.721 li
210.664 183.376 204.289 186.458 200.988 191.947 cv
198.37 196.3 198.122 201.449 200.251 207.248 cv
202.163 212.457 208.919 216.772 221.513 220.827 cv
232.279 224.292 245.925 227.109 259.122 229.833 cv
282.097 234.576 305.856 239.481 309.251 247.149 cv
309.921 248.662 309.737 250.26 308.688 252.034 cv
302.752 262.084 293.06 266.525 279.884 265.235 cv
269.891 264.256 261.549 260.18 261.467 260.139 cv
260.917 259.866 260.25 260.092 259.978 260.641 cv
259.706 261.191 259.931 261.857 260.481 262.129 cv
260.833 262.304 269.221 266.409 279.607 267.44 cv
281.148 267.593 282.65 267.669 284.115 267.669 cv
288.499 267.669 292.529 266.985 296.14 265.623 cv
302.202 263.338 307.068 259.146 310.601 253.164 cv
312.021 250.761 312.25 248.435 311.282 246.25 cv
cp
.486275 .486275 .54902 rgb
f
260.087 262.639 mo
257.136 260.622 li
256.664 260.299 256.014 260.421 255.691 260.893 cv
255.368 261.365 255.49 262.016 255.962 262.339 cv
258.913 264.356 li
260.087 262.639 li
cp
f
263.559 257.562 mo
260.608 255.544 li
260.136 255.221 259.486 255.343 259.163 255.815 cv
258.84 256.288 258.962 256.938 259.435 257.261 cv
262.385 259.278 li
263.559 257.562 li
cp
f
267.194 258.945 mo
261.521 267.242 li
257.077 264.203 li
262.75 255.907 li
267.194 258.945 li
cp
f
309.731 112.036 mo
343.337 84.8794 li
348.051 98.5754 li
312.186 117.414 li
309.731 112.036 li
cp
1 .670588 .427451 rgb
f
310.303 111.473 mo
310.303 111.473 312.061 110.999 303.941 111.487 cv
297.492 111.874 301.206 121.143 305.004 120.825 cv
308.803 120.506 313.574 116.662 313.574 116.662 cv
310.303 111.473 li
cp
f
301.779 112.075 mo
301.779 112.075 297.983 114.173 299.109 115.095 cv
300.234 116.018 301.098 115.263 301.098 115.263 cv
301.098 115.263 298.566 115.867 299.445 117.305 cv
300.325 118.742 302.066 117.982 302.066 117.982 cv
302.066 117.982 300.914 117.891 300.966 119.059 cv
301.038 120.662 302.872 120.834 303.618 120.383 cv
304.363 119.932 303.578 112.452 301.779 112.075 cv
cp
f
307.529 111.26 mo
306.851 111.177 li
306.057 111.08 305.274 111.425 304.81 112.075 cv
303.356 114.11 300.476 118.411 301.845 118.77 cv
303.643 119.241 310.35 112.133 307.529 111.26 cv
cp
f
342.446 129.946 mo
342.708 130.877 319.377 166.172 331.417 178.929 cv
338.108 186.017 388.191 202.757 388.191 202.757 cv
395.07 180.412 li
353.382 163.096 li
373.545 137.464 li
361.198 122.59 li
341.65 121.358 li
342.446 129.946 li
cp
.592157 .827451 .870588 rgb
f
385.63 231.104 mo
385.641 233.101 379.803 234.751 372.591 234.79 cv
365.379 234.828 359.524 233.24 359.513 231.243 cv
359.503 229.246 365.34 227.595 372.552 227.557 cv
379.764 227.519 385.619 229.107 385.63 231.104 cv
cp
.152941 .529412 .537255 rgb
f
358.201 127.657 mo
358.151 128.727 359.422 231.264 359.422 231.264 cv
359.422 231.264 371.967 225.118 385.658 230.362 cv
382.467 158.676 379.074 126.807 379.074 126.807 cv
358.201 127.657 li
cp
.592157 .827451 .870588 rgb
f
379.726 255.356 mo
352.521 254.067 li
351.26 254.008 350.277 252.927 350.337 251.666 cv
350.397 250.405 351.477 249.423 352.738 249.482 cv
379.943 250.771 li
381.204 250.831 382.187 251.911 382.127 253.172 cv
382.067 254.433 380.987 255.416 379.726 255.356 cv
cp
.4 .392157 .545098 rgb
f
380.602 231.329 mo
367.601 230.713 li
367.597 239.77 li
367.597 239.77 355.203 239.489 352.446 245.946 cv
351.456 248.263 li
350.6 250.268 352.007 252.511 354.184 252.614 cv
377.162 253.703 li
379.172 253.798 380.848 252.181 380.824 250.168 cv
380.602 231.329 li
cp
1 .670588 .427451 rgb
f
357.097 241.711 mo
357.097 241.711 362.417 244.198 360.81 252.967 cv
364.704 253.074 366.188 253.336 366.188 253.336 cv
366.188 253.336 368.029 241.889 363.287 240.036 cv
359.686 238.629 357.097 241.711 357.097 241.711 cv
cp
.4 .392157 .545098 rgb
f
358.608 191.756 mo
358.262 166.264 li
358.721 166.258 li
359.067 191.75 li
358.608 191.756 li
cp
.454902 .733333 .768627 rgb
f
394.609 180.353 mo
396.531 180.895 396.673 186.366 394.926 192.575 cv
393.178 198.784 390.203 203.378 388.28 202.837 cv
386.357 202.296 386.216 196.824 387.963 190.615 cv
389.711 184.407 392.686 179.812 394.609 180.353 cv
cp
.152941 .529412 .537255 rgb
f
415.254 193.647 mo
405.351 219.018 li
404.892 220.194 403.555 220.781 402.379 220.322 cv
401.203 219.863 400.616 218.525 401.075 217.349 cv
410.978 191.978 li
411.437 190.802 412.774 190.215 413.95 190.674 cv
415.126 191.133 415.713 192.471 415.254 193.647 cv
cp
.4 .392157 .545098 rgb
f
392.762 185.149 mo
388.03 197.273 li
396.612 200.168 li
396.612 200.168 392.391 211.825 397.63 216.497 cv
399.511 218.175 li
401.138 219.626 403.712 219.009 404.505 216.978 cv
412.869 195.549 li
413.601 193.674 412.603 191.57 410.688 190.95 cv
392.762 185.149 li
cp
1 .670588 .427451 rgb
f
395.101 210.738 mo
395.101 210.738 399.155 206.49 406.954 210.811 cv
408.297 207.155 409.02 205.832 409.02 205.832 cv
409.02 205.832 398.758 200.434 395.489 204.338 cv
393.007 207.301 395.101 210.738 395.101 210.738 cv
cp
.4 .392157 .545098 rgb
f
323.054 71.8512 mo
324.973 73.3394 332.338 78.5812 334.489 82.2942 cv
341.801 83.5412 347.135 71.0606 347.135 71.0606 cv
324.079 56.2832 li
323.054 71.8512 li
cp
1 .670588 .427451 rgb
f
320.135 45.3172 mo
320.135 45.3172 306.043 53.4819 310.526 63.2607 cv
315.009 73.0394 316.131 78.999 320.66 77.0209 cv
325.188 75.0427 326.938 72.2696 326.607 68.6075 cv
326.276 64.9453 328.335 44.4843 320.135 45.3172 cv
cp
f
307.575 52.3898 mo
307.575 52.3898 302.874 64.3824 312.174 62.4349 cv
321.474 60.4872 320.841 60.9752 322.36 63.4839 cv
323.879 65.9926 329.504 61.0467 326.966 52.4842 cv
324.427 43.9216 320.06 40.063 307.575 52.3898 cv
cp
.94902 .494118 .34902 rgb
f
323.776 60.8421 mo
324.001 62.2965 323.283 63.6147 322.172 63.7865 cv
321.062 63.9585 319.979 62.9188 319.754 61.4644 cv
319.529 60.0101 320.247 58.6917 321.357 58.5199 cv
322.468 58.3479 323.551 59.3876 323.776 60.8421 cv
cp
1 .670588 .427451 rgb
f
316.865 58.1653 mo
316.865 58.1653 324.218 56.1167 328.145 66.561 cv
332.073 77.0052 334.375 67.7519 339.924 67.866 cv
345.472 67.9802 349.588 59.7322 347.898 56.3467 cv
346.207 52.9615 324.23 41.0756 318.855 45.02 cv
313.48 48.9642 309.651 60.0476 316.865 58.1653 cv
cp
.94902 .494118 .34902 rgb
f
324.43 86.1619 mo
316.366 83.892 li
314.439 83.3497 313.317 81.3481 313.859 79.4214 cv
319.442 59.5876 li
319.984 57.6609 321.986 56.5385 323.913 57.0807 cv
331.977 59.3506 li
333.904 59.8929 335.026 61.8945 334.484 63.8212 cv
328.901 83.655 li
328.359 85.5818 326.357 86.7041 324.43 86.1619 cv
cp
.227451 .223529 .34902 rgb
f
318.497 92.9349 mo
318.497 92.9349 315.411 88.8821 315.299 84.3281 cv
315.245 82.143 315.163 78.7659 315.594 78.1893 cv
315.825 77.881 316.245 79.3389 316.32 79.6713 cv
317.147 82.5164 li
317.147 82.5164 316.962 80.0346 315.49 75.9219 cv
315.365 75.573 315.702 75.2542 315.948 75.4913 cv
318.358 77.8182 318.356 81.236 318.356 81.236 cv
318.356 81.236 318.781 78.1025 316.41 74.874 cv
315.863 74.1291 316.649 74.1591 316.843 74.2496 cv
320.253 75.8435 320.256 80.5357 320.256 80.5357 cv
320.256 80.5357 319.826 77.854 318.262 74.2231 cv
318.161 73.9884 318.379 73.7666 318.591 73.8923 cv
320.099 74.7901 322.967 77.6246 323.747 89.6593 cv
319.573 93.5833 318.497 92.9349 318.497 92.9349 cv
cp
1 .670588 .427451 rgb
f
324.183 89.5745 mo
324.183 89.5745 324.478 81.6293 323.15 80.0636 cv
321.823 78.4981 321.732 79.3197 321.851 80.4576 cv
321.97 81.5956 320.715 87.0818 320.715 87.0818 cv
324.183 89.5745 li
cp
f
324.674 60.5695 mo
324.674 61.4189 323.986 62.1074 323.136 62.1074 cv
322.287 62.1074 321.599 61.4189 321.599 60.5695 cv
321.599 59.7201 322.287 59.0315 323.136 59.0315 cv
323.986 59.0315 324.674 59.7201 324.674 60.5695 cv
cp
.945098 .933333 .866667 rgb
f
324.367 60.5695 mo
324.367 61.249 323.816 61.7999 323.136 61.7999 cv
322.457 61.7999 321.906 61.249 321.906 60.5695 cv
321.906 59.89 322.457 59.3391 323.136 59.3391 cv
323.816 59.3391 324.367 59.89 324.367 60.5695 cv
cp
.227451 .223529 .34902 rgb
f
358.514 156.918 mo
358.416 156.918 358.318 156.876 358.25 156.793 cv
358.13 156.648 358.151 156.432 358.297 156.312 cv
358.546 156.107 383.189 135.637 376.585 124.74 cv
376.487 124.579 376.539 124.369 376.7 124.271 cv
376.862 124.173 377.072 124.225 377.17 124.386 cv
378.787 127.055 378.801 130.441 377.209 134.449 cv
375.957 137.605 373.707 141.161 370.522 145.016 cv
365.118 151.56 358.794 156.788 358.731 156.84 cv
358.514 156.918 li
cp
.454902 .733333 .768627 rgb
f
318.05 91.3784 mo
318.05 91.3784 318.861 127.61 333.35 123.501 cv
335.426 112.761 327.751 102.576 327.751 102.576 cv
324.015 89.3013 li
318.05 91.3784 li
cp
1 .670588 .427451 rgb
f
380.229 129.106 mo
336.294 141.224 li
336.294 141.224 329.023 92.8491 331.671 79.149 cv
331.671 79.149 340.352 76.35 343.88 67.7241 cv
345.984 69.0929 348.211 71.327 350.45 74.0717 cv
352.181 76.1941 353.919 78.6221 355.612 81.1891 cv
359.95 87.7702 363.988 95.2696 366.845 100.907 cv
367.971 103.129 368.914 105.062 369.618 106.535 cv
370.529 108.438 380.229 129.106 380.229 129.106 cv
cp
1 .92549 .741176 rgb
f
325.751 110.22 mo
325.751 110.22 331.917 78.3424 342.273 81.9603 cv
352.63 85.5783 353.02 92.2809 350.83 99.3705 cv
348.64 106.46 333.35 123.501 333.35 123.501 cv
325.751 110.22 li
cp
.839216 .827451 .788235 rgb
f
273.404 105.556 mo
297.878 92.0577 li
315.637 126.6 li
295.357 139.154 li
273.404 105.556 li
cp
.94902 .945098 .941176 rgb
f
275.309 106.564 mo
278.033 110.532 li
298.9 98.1673 li
296.773 94.5284 li
275.309 106.564 li
cp
.94902 .94902 .94902 rgb
f
280.475 112.369 mo
283.199 116.337 li
302.663 104.804 li
300.435 101.177 li
280.475 112.369 li
cp
f
285.2 118.944 mo
287.753 122.557 li
305.996 112.058 li
303.908 108.757 li
285.2 118.944 li
cp
f
289.424 125.383 mo
291.977 128.995 li
310.219 118.496 li
308.131 115.195 li
289.424 125.383 li
cp
f
292.265 130.915 mo
294.818 134.528 li
313.061 124.029 li
310.973 120.728 li
292.265 130.915 li
cp
f
118.993 240.548 mo
72.0818 240.548 li
51.4612 240.548 34.5896 223.677 34.5896 203.056 cv
34.5896 92.6642 li
34.5896 72.0435 51.4612 55.1719 72.0818 55.1719 cv
118.993 55.1719 li
139.613 55.1719 156.485 72.0435 156.485 92.6642 cv
156.485 203.056 li
156.485 223.677 139.613 240.548 118.993 240.548 cv
cp
.945098 .933333 .866667 rgb
f
113.611 172.189 mo
116.581 168.328 li
125.906 156.209 li
125.906 156.209 113.829 137.568 103.059 132.51 cv
98.6306 130.43 94.4238 130.645 91.3684 135.394 cv
84.2629 146.433 113.611 172.189 113.611 172.189 cv
cp
1 .882353 .741176 rgb
f
116.581 168.328 mo
125.906 156.209 li
125.906 156.209 113.829 137.568 103.059 132.51 cv
100.983 132.662 99.0889 133.766 97.5293 136.188 cv
91.8599 144.999 112.168 164.298 116.581 168.328 cv
cp
f
112.988 169.393 mo
112.895 169.361 li
112.871 169.152 li
124.657 154.303 li
124.867 154.279 li
124.891 154.488 li
113.104 169.337 li
112.988 169.393 li
cp
.94902 .945098 .941176 rgb
f
113.656 166.183 mo
113.563 166.151 li
113.539 165.941 li
123.804 153.008 li
124.013 152.984 li
124.037 153.193 li
113.772 166.126 li
113.656 166.183 li
cp
f
99.1465 117.681 mo
106.085 116.12 li
106.085 116.12 121.582 142.231 126.334 156.922 cv
128.505 163.632 128.435 167.959 123.624 166.327 cv
121.702 165.675 120.123 165.476 118.785 165.38 cv
113.654 165.018 112.116 166.236 108.702 149.628 cv
104.397 128.689 99.1465 117.681 99.1465 117.681 cv
cp
1 .592157 .411765 rgb
f
111.55 160.466 mo
127.616 161.873 li
128.582 166.85 127.094 171.523 122.372 168.034 cv
120.486 166.64 114.253 165.607 112.872 164.952 cv
111.55 160.466 li
cp
f
106.484 117.606 mo
106.484 117.606 104.692 112.238 101.369 109.916 cv
99.7742 108.802 97.3101 107.08 96.7061 107.176 cv
96.3833 107.228 97.2891 108.309 97.5042 108.537 cv
99.2688 110.652 li
99.2688 110.652 97.509 109.277 95.0715 105.977 cv
94.8647 105.698 94.4902 105.838 94.5647 106.169 cv
95.2957 109.419 97.8247 111.087 97.8247 111.087 cv
97.8247 111.087 95.3323 109.928 93.9182 106.272 cv
93.592 105.429 93.291 106.133 93.2783 106.347 cv
93.0559 110.117 96.5259 112.411 96.5259 112.411 cv
96.5259 112.411 94.7188 110.724 92.6755 107.579 cv
92.5435 107.375 92.2898 107.459 92.2959 107.706 cv
92.3401 109.466 93.2583 113.366 101.841 119.928 cv
106.459 118.184 106.484 117.606 106.484 117.606 cv
cp
f
100.243 119.495 mo
100.243 119.495 95.6001 116.647 94.9873 114.718 cv
94.375 112.789 95.0198 113.112 95.8127 113.772 cv
96.6057 114.431 100.418 115.528 100.418 115.528 cv
100.243 119.495 li
cp
f
93.6785 111.466 mo
93.5051 115.367 94.6707 118.486 99.2886 118.792 cv
104.109 119.112 105.353 115.893 105.526 111.993 cv
105.7 108.093 105.201 104.825 99.9163 104.667 cv
94.8745 104.516 93.8518 107.566 93.6785 111.466 cv
cp
.47451 .568627 .556863 rgb
f
97.6538 117.375 mo
101.031 117.375 li
102.369 117.375 103.463 116.28 103.463 114.943 cv
103.463 108.14 li
103.463 106.802 102.369 105.708 101.031 105.708 cv
97.6538 105.708 li
96.3164 105.708 95.2219 106.802 95.2219 108.14 cv
95.2219 114.943 li
95.2219 116.28 96.3164 117.375 97.6538 117.375 cv
cp
.619608 .686275 .678431 rgb
f
97.5349 115.502 mo
100.058 115.502 li
101.057 115.502 101.875 114.684 101.875 113.685 cv
101.875 108.603 li
101.875 107.604 101.057 106.787 100.058 106.787 cv
97.5349 106.787 li
96.5359 106.787 95.7183 107.604 95.7183 108.603 cv
95.7183 113.685 li
95.7183 114.684 96.5359 115.502 97.5349 115.502 cv
cp
.47451 .568627 .556863 rgb
f
61.3821 207.938 mo
62.3047 198.077 58.563 186.768 58.563 186.768 cv
77.8384 189.383 li
79.4602 188.887 86.875 184.695 90.0537 204.624 cv
90.2317 205.74 90.4353 206.844 90.658 207.938 cv
61.3821 207.938 li
cp
.00392157 .101961 .294118 rgb
f
87.658 192.619 mo
87.449 193.431 86.0979 194.628 83.9983 195.781 cv
80.7979 197.54 77.187 198.41 73.5339 198.414 cv
69.2124 198.421 li
61.0535 198.431 53.4099 194.357 48.9458 187.528 cv
48.8552 187.389 li
48.2424 186.445 47.8696 185.675 47.9114 185.286 cv
48.0369 184.189 li
54.5833 127.059 li
54.6694 126.305 55.9929 125.486 57.8 124.743 cv
62.895 122.648 68.5601 122.388 73.8606 123.888 cv
99.3027 131.091 li
105.554 151.723 87.658 192.619 87.658 192.619 cv
cp
.980392 .172549 .25098 rgb
f
91.1902 135.451 mo
89.8438 140.263 86.4192 144.993 78.6665 147.081 cv
73.1499 145.292 64.3486 133.255 65.6951 128.444 cv
67.0415 123.633 72.1299 123.607 81.0598 126.106 cv
89.9897 128.605 92.5366 130.64 91.1902 135.451 cv
cp
1 .882353 .741176 rgb
f
88.5481 132.925 mo
87.9407 135.947 82.9011 137.484 77.2917 136.357 cv
71.6826 135.229 66.791 131.567 68.2349 128.843 cv
70.5408 124.493 73.5789 125.677 79.1882 126.804 cv
84.7976 127.931 89.1553 129.903 88.5481 132.925 cv
cp
1 .592157 .411765 rgb
f
97.9346 100.716 mo
95.2068 110.463 86.1377 116.445 77.6777 114.078 cv
69.2175 111.71 66.4514 103.158 69.179 93.4115 cv
71.9063 83.6649 79.0947 76.414 87.5549 78.7814 cv
96.0146 81.1488 100.662 90.9693 97.9346 100.716 cv
cp
.227451 .223529 .34902 rgb
f
79.6521 105.127 mo
74.512 118.249 li
73.2957 121.354 71.6609 124.268 69.781 127.022 cv
66.6946 131.542 72.5632 133.22 75.5403 134.053 cv
79.3381 135.116 li
82.7954 136.084 86.5022 133.154 87.249 128.865 cv
90.8369 108.257 li
79.6521 105.127 li
cp
1 .592157 .411765 rgb
f
98.4236 100.712 mo
98.4236 100.712 98.511 124.212 91.8132 123.267 cv
83.3066 122.067 76.1658 117.994 75.6931 109.552 cv
75.3542 103.499 82.9492 91.5607 82.9492 91.5607 cv
82.9492 91.5607 98.1411 90.6969 98.4236 100.712 cv
cp
1 .670588 .427451 rgb
f
73.7021 102.24 mo
74.3936 104.088 73.8982 105.981 72.5959 106.469 cv
71.2937 106.956 69.6777 105.853 68.9861 104.005 cv
68.2947 102.157 68.79 100.264 70.092 99.7768 cv
71.3945 99.2897 73.0107 100.393 73.7021 102.24 cv
cp
.980392 .686275 .521569 rgb
f
77.0022 84.1779 mo
91.4138 80.6221 li
94.4541 81.1321 96.6204 84.5501 98.6262 83.5293 cv
104.135 80.7266 109.429 88.8378 105.727 92.5868 cv
105.088 93.2334 103.714 94.7115 104.888 95.6619 cv
108.329 98.4473 105.099 104.892 97.0107 102.695 cv
88.9226 100.497 86.8416 93.6714 79.8076 96.2901 cv
75.9199 97.7376 73.9641 94.2064 72.9924 90.758 cv
72.1665 87.8271 74.0239 84.8132 77.0022 84.1779 cv
cp
.227451 .223529 .34902 rgb
f
45.4395 207.938 mo
44.3562 200.076 46.0686 191.966 51.1587 185.079 cv
60.0383 173.066 75.5608 192.806 75.5608 192.806 cv
75.5608 192.806 78.2874 198.526 81.603 207.938 cv
45.4395 207.938 li
cp
.00392157 .101961 .294118 rgb
f
77.9985 196.875 mo
77.9985 196.875 76.5076 204.181 74.2712 205.373 cv
72.0347 206.566 45.4961 195.832 46.2415 190.464 cv
49.2234 183.755 49.2234 183.755 49.2234 183.755 cv
49.2234 183.755 77.5513 198.068 77.9985 196.875 cv
cp
1 .882353 .741176 rgb
f
77.4023 194.937 mo
77.7004 195.384 81.5769 203.882 81.5769 203.882 cv
81.5769 203.882 86.646 202.541 88.5842 199.559 cv
90.5225 196.577 85.7515 188.824 85.7515 188.824 cv
77.4023 194.937 li
cp
f
97.7844 153.103 mo
87.658 192.619 li
87.449 193.431 86.0979 194.628 83.9983 195.781 cv
80.7979 197.54 77.187 198.41 73.5339 198.414 cv
69.2124 198.421 li
61.0535 198.431 53.4099 194.357 48.9458 187.528 cv
48.8552 187.389 li
48.2424 186.445 47.8696 185.675 47.9114 185.286 cv
48.0369 184.189 li
52.8459 180.257 60.8967 176.684 69.7173 173.993 cv
84.6145 169.445 79.8889 151.703 90.2454 151.253 cv
93.5708 151.111 96.0085 151.925 97.7844 153.103 cv
cp
.980392 .172549 .25098 rgb
f
76.3181 91.8041 mo
76.3181 91.8041 74.8254 103.746 76.6536 108.186 cv
72.4749 105.835 72.5164 104.999 72.5164 104.999 cv
72.5164 104.999 70.5383 88.5661 73.3845 86.9409 cv
75.6812 88.1302 76.3181 91.8041 76.3181 91.8041 cv
cp
.0705882 .0705882 .0705882 rgb
f
65.4666 102.874 mo
65.2715 107.267 66.584 110.779 71.7847 111.124 cv
77.2129 111.485 78.6143 107.86 78.8093 103.467 cv
79.0046 99.0743 78.4424 95.3951 72.4915 95.2169 cv
66.8135 95.047 65.6619 98.4814 65.4666 102.874 cv
cp
.47451 .568627 .556863 rgb
f
84.6165 122.067 mo
84.905 120.582 li
81.3877 119.898 78.5647 118.367 76.0205 115.764 cv
73.8179 113.51 72.9382 107.633 72.9297 107.573 cv
71.4321 107.792 li
71.47 108.053 72.3914 114.215 74.9382 116.822 cv
77.7075 119.655 80.7827 121.322 84.6165 122.067 cv
cp
f
94.4331 81.8521 mo
94.4331 81.8521 84.8726 80.1747 80.791 84.8153 cv
75.144 82.5789 75.144 82.4113 75.144 82.4113 cv
75.144 82.4113 77.9954 76.4288 85.7668 78.0503 cv
93.5386 79.6715 92.5881 80.7898 94.4331 81.8521 cv
cp
.619608 .686275 .678431 rgb
f
81.5737 84.2004 mo
81.4619 84.368 74.4172 89.6237 74.6968 97.451 cv
69.7766 99.2961 68.938 97.7865 68.7144 97.0597 cv
68.4907 96.3329 67.5403 88.5054 75.759 81.5725 cv
81.8533 83.6412 81.1824 81.6285 81.1824 81.6285 cv
81.5737 84.2004 li
cp
f
69.9434 109.528 mo
73.7471 109.528 li
75.2534 109.528 76.4858 108.295 76.4858 106.789 cv
76.4858 99.1274 li
76.4858 97.6211 75.2534 96.3887 73.7471 96.3887 cv
69.9434 96.3887 li
68.4373 96.3887 67.2046 97.6211 67.2046 99.1274 cv
67.2046 106.789 li
67.2046 108.295 68.4373 109.528 69.9434 109.528 cv
cp
f
69.8096 107.418 mo
72.6511 107.418 li
73.7761 107.418 74.6968 106.498 74.6968 105.373 cv
74.6968 99.6495 li
74.6968 98.5242 73.7761 97.6036 72.6511 97.6036 cv
69.8096 97.6036 li
68.6843 97.6036 67.7639 98.5242 67.7639 99.6495 cv
67.7639 105.373 li
67.7639 106.498 68.6843 107.418 69.8096 107.418 cv
cp
.47451 .568627 .556863 rgb
f
84.5649 122.722 mo
89.541 122.722 li
90.3865 122.722 91.0786 122.031 91.0786 121.185 cv
91.0786 120.339 90.3865 119.647 89.541 119.647 cv
84.5649 119.647 li
83.7192 119.647 83.0273 120.339 83.0273 121.185 cv
83.0273 122.031 83.7192 122.722 84.5649 122.722 cv
cp
.411765 .388235 .396078 rgb
f
86.561 120.877 mo
89.8372 120.877 li
89.9971 120.877 90.1279 120.747 90.1279 120.587 cv
90.1279 120.386 li
90.1279 120.225 89.9971 120.095 89.8372 120.095 cv
86.561 120.095 li
86.4009 120.095 86.27 120.225 86.27 120.386 cv
86.27 120.587 li
86.27 120.747 86.4009 120.877 86.561 120.877 cv
cp
.94902 .945098 .941176 rgb
f
127.506 169.027 mo
127.506 169.027 123.724 178.096 118.097 176.22 cv
112.47 174.345 109.699 162.736 110.062 156.094 cv
110.424 149.451 130.948 148.023 127.506 169.027 cv
cp
1 .592157 .411765 rgb
f
86.3867 184.487 mo
81.3396 190.504 li
81.3396 190.504 55.28 181.926 43.9495 174.323 cv
38.7742 170.851 36.6709 167.584 41.5266 165.429 cv
43.4663 164.57 44.8921 163.612 46.063 162.748 cv
50.5527 159.426 51.2366 157.444 62.4011 167.409 cv
76.4771 179.973 86.3867 184.487 86.3867 184.487 cv
cp
1 .670588 .427451 rgb
f
79.0166 189.539 mo
79.0166 189.539 84.9236 192.277 90.4973 191.679 cv
93.1719 191.392 97.3049 190.949 97.9524 190.454 cv
98.2983 190.19 96.4636 190.02 96.0481 190 cv
92.4663 189.662 li
92.4663 189.662 95.5203 189.453 100.734 190.202 cv
101.176 190.265 101.521 189.899 101.199 189.705 cv
98.0427 187.799 93.8706 188.328 93.8706 188.328 cv
93.8706 188.328 97.6404 187.445 101.892 189.175 cv
102.874 189.574 102.734 188.84 102.598 188.672 cv
100.204 185.712 94.4761 186.434 94.4761 186.434 cv
94.4761 186.434 97.8062 186.424 102.444 187.334 cv
102.744 187.393 102.986 187.153 102.804 186.974 cv
101.511 185.695 97.6741 183.436 82.8809 184.561 cv
78.6384 189.091 79.0166 189.539 79.0166 189.539 cv
cp
f
85.0796 183.766 mo
85.0796 183.766 92.5872 182.635 94.6726 183.641 cv
96.7581 184.647 95.7668 184.858 94.3623 184.922 cv
92.9575 184.987 87.668 186.839 87.668 186.839 cv
85.0796 183.766 li
cp
f
57.6282 163.259 mo
39.6284 170.551 li
37.54 165.935 36.9277 157.172 43.0256 158.7 cv
45.4614 159.311 53.5171 159.211 55.229 159.289 cv
57.6282 163.259 li
cp
1 .592157 .411765 rgb
f
37.9775 160.519 mo
42.4919 161.383 li
56.6648 164.097 li
56.6648 164.097 66.3562 145.602 65.5525 134.155 cv
65.2217 129.448 63.1187 125.933 57.8401 125.382 cv
45.5669 124.102 37.9775 160.519 37.9775 160.519 cv
cp
1 .882353 .741176 rgb
f
42.4919 161.383 mo
56.6648 164.097 li
56.6648 164.097 66.3562 145.602 65.5525 134.155 cv
64.4768 132.44 62.708 131.297 60.0144 131.015 cv
50.2192 129.995 43.7617 155.839 42.4919 161.383 cv
cp
f
57.6272 162.484 mo
57.5967 162.481 li
40.0667 158.846 li
39.9509 158.67 li
40.1272 158.554 li
57.6575 162.189 li
57.7729 162.365 li
57.6272 162.484 li
cp
.94902 .945098 .941176 rgb
f
58.2942 161.186 mo
58.2637 161.183 li
42.9954 158.018 li
42.8796 157.842 li
43.0559 157.726 li
58.3242 160.891 li
58.4399 161.067 li
58.2942 161.186 li
cp
f
101.875 211.169 mo
76.4858 206.945 li
116.137 189.643 li
142.941 196.353 li
101.875 211.169 li
cp
.4 .392157 .545098 rgb
f
147.246 164.613 mo
147.246 167.581 142.941 196.353 142.941 196.353 cv
101.875 211.169 li
105.554 178.17 li
147.246 164.613 li
cp
.321569 .254902 .227451 rgb
f
84.3074 156.918 mo
88.2178 156.618 li
89.7795 156.497 91.3486 156.499 92.9102 156.622 cv
96.6606 156.918 li
96.6606 150.822 li
84.3074 150.822 li
84.3074 156.918 li
cp
.909804 .0823529 .203922 rgb
f
84.3074 156.277 mo
96.6606 156.277 li
96.6606 148.576 li
84.3074 148.576 li
84.3074 156.277 li
cp
.94902 .945098 .941176 rgb
f
89.8186 150.501 mo
91.3101 150.501 li
91.6873 147.453 li
89.4412 147.453 li
89.8186 150.501 li
cp
0 .0941176 .627451 rgb
f
118.933 55.1719 mo
209.237 55.1719 li
209.237 55.1719 156.783 58.7483 154.25 97.4926 cv
151.716 136.237 99.7095 71.1166 118.933 55.1719 cv
cp
.945098 .933333 .866667 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2006.i602.016.P.m009.c20.home appliance store flat-04.eps)
%%CreationDate: 2/26/2021 12:23 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9=QoCqkQ>hAc]ksA$I#aT=12UIbC&5!=a!o4Z-&d'R+8[Ge%pP]&aIqD/VZ^U8l3BB;T@3S>_C%TluBJc<MbL\h`Ei!rJ
%YQ(r!d5ff6M^Hn/L8Md7VE'/+2)k9(ZL>3L'J.a,SI;XPhJ:\8?E:J?YL]2FjimQC\!G]e:Z36Oo?jU>lb>7OW`qN>B6%5SW*$$F
%`Hq-mD.frO7RZ9m*e)jqVk=+h9QY9]FTJ9?YMFrI5i#OiDLXGaD\B#@BE%K=TsHD(>@3&__bUqpnh3<`q30iG%6o>jK[o.l/D9B@
%f5R3s]2Ggu6d$>OJ*,_59Yif144Ue+:F7Op+5;i3=N-KJD?D=>HHLh70`%R?J)kOl%LKtD7>Ch4`Hjc-B,L)r.GNP1.ps=-/7<00
%PJc"`rrDA!!%INh8K-Ds]lE!hcWc%a&do_+(QGHLp>hGG_6Z81W*:2<8Gj5;LM;uA%Em$8"p^I(BkOt"m#8bsQK80]]#^>+Y58_u
%,3/X%Ge]S$00H`121<Tf2;8A$s+(<?cppGZI.D`al8@JM.W+C`75RM0gePQL<FK"(a,<ra`$@5joWMW]cu#A#D%Q/^[=e(ZS?]K[
%]@WU3D>0*H'$U8CFrOcTYl9YDWcK"s(bIORA.:W<\A^8nRh<jsr!$XL9mTVfeq#[]FUO_c4V6o7B'$Bt>D?#(RDsVoheZ?9OgGKZ
%A'9@XM6%`plND_9^&mKb[T<htch+"*S_1O$Z9&<Dnj]ao?GF9)B]6.?&,H9aWEMOZ^Q!]9n">P5_e4Z/8$D7J5c'2Ms8CPbq42r@
%=7*eiS'?8WYuNlbs8CPsY$=3b1=3/#Q]^/hb08><_9]2eBfm=(4KLi!MPpSJh5L;CWqAi_@Tb<XNI+[7ju,$f79JMljVN=)!aANe
%=O:i586%$2D8Rm3W>6u4<WA-^Z*2S4[9]d)<'`@Mg&>8qT#7a9eS;#4#-=g`Zedq'W#?2l]lrYA]2"uEj]^OB9D'X5k&P).p]p_K
%<?RZA%\%>BK]ho+m^_^@fL`_Z\J5UUr&'p"S4H4E1RRKG[9>S-\rF$g.?e[n>%a8@HG(6JhWOd?V>,9,'gA$X=E'rlCV)IG:N*:_
%JaN^ChW-I+gfjJP^R!g$Bkeq2R#Q+i"E_Gj*a7^a[gQtb]5jE6(_?UN*7q6VejW\fS?`AMYu7TJ#Cfoo0,;hSPc/[%`[LX_3)2[5
%;PS?gXl-RW<,/'OA.CYc[MQ'jqF(LOeBGasg[Jm0Js$@9Q2Cp][.p6#\2\LfA"*>di8#aDWbk^2QGUt9AbbZ1cLu&#4m6s\;F4C#
%D>kFCeOjHQT8RFn^0H<lBNC-TD%D/5!=ItX9t.`.l)[c72n^,pcne=!YW%8Ci]lfpa>SE+cSTM,;.f%m.]o6g$iP+H*P^+m9"B@.
%TNKIPOJSTPI^t/hB'.=<S=[,eE"`p*(HZ>uq'Q=fs%G<YIo<N?B7)8k[Z8(P^%95$`YV"0?OR>ARbA>mbupm5Ji,)90&Glh?H!?H
%d6*s2P`\P&K"4;6KljCi)FV"qc!rFPCF*okkfBYk%SKq"fGGOO9%.QuWbGir-o`i&CA!4&"dGk2/@DDrH6:SVDPHd5R+"QH<U3oV
%QJ1c1<(t7=O)7h:C4%jBa)9'N2SG_'=F"VhLp$:t_.F5`C`!DP6..h7"WFYK&"eW^9G)$oUR8,A4L2_#bY;&YZ8&O\)mnH74#WBC
%(F'1X::'"u9'8JYN`%Sgp@Ua!=c86G'[,U(H9o]rkRK-Y]T^QsZKrou).hJq((4&UfpU!gqeoS[-VYD!iTf`TV58"?^<A"[mM;3`
%JMU5<gSOCt.FV%[G070jVO]L0XsPQ%bA]&86FWS%mtd5LY<&h]$4a'qWo]]IbW5U(_j=V!,)8K#K.jdbh5R(:+11r$l@e:aUW5=,
%Mu'Uk)EdLm9fF?Jn]a%J+e2MHKCL^ja#?,i?0J*;W+0DZVp3gk0]eTmSVmu4PG[7f??f^k0l>9(MfD`l2+cnL:/@ofXe_AXP$9MH
%r+l^hU8$[Wb,tYds.l#(Y]SW;1Smes99+oV=NOQ%c"XOh/ls_d1sJ&gMiN^r;;+X4YFt"/`5--LP3'_r)lI*2fK2g(fDF[L#'h)p
%U2(XdiEn/=IokPar*7)5p!I$ma#)LA:iNK_N*E>fUtUeTd+XgEAZj`HF)TX(*"+\LN?>B0n:"C$[S85A@(c9Epc>Pfe./A'CR^?T
%bLg.]oNuFGSQ;fNf(+I(RVWD"3KN'o*G#oQqFeA.-68^OJZE^u1C0n]M.b;taIG($8Du6b+65/7:BhRQS(a9^#9sZg`Ybh.'Kcdb
%),0O-:A-fG_;+W:6E](E[*LA;G+'F^$?sP?.f[HUNL/C!VJ;/cZ&\giS)cCI6sObMVr\&*a(q8m31/_g_3M]1B?9?Hq;4;%:3$;'
%SKY$ijF0IjcB)ss20FX9d:^OFK']@RAZ7IrFbY;8>cBO?L$:Tb-4LYbO`bLeV)G@!N@3541uUV7F`+;+NRbT0V013#)JS<oUsnnc
%lS[%%C2%4[kD=0bgE0$@4.=,<?581rM^?RdRY&HF#KC@RUd^"?d'1ut5`*p!di)+LH)Goh\ntWZP/Sdgq^-`hop>C]D+^cf]'4WW
%d^B8>+]BGfEI,^9nrP:2RIZGF=8Gg.ZcZ!#6#JGlVlZCH4g29q>,&J-HWT=9^@J=&YBoT$VH7*'2r33'ZZ5(k)oJa[.D2'T'n/g?
%Di0f#gBMJli5tq)je@qgUKCW=b\ik9KcC]Zku*9ggh''td+J%(H7HlT^hB#s.a%Q@dEVuE)%'Ipc!.f.0W*3I'N4+8IL/M\mirLZ
%XSgpmr6kZ;p/2;gO!r&,EkEg@bN5(gEkEg@MfQHYa3/tUn`%/`UuTGg_N=dd3F4&b!`b8Ib;`hJ#DKJtk;+h&U]]N4R;*8\N$bTm
%Sa3ePEj@*[d5[8&\eA,?8MW!a#qOFLHVb#!-A)PgY[U:bV2qjMr8$lYF1@9&=)ZR"mFC>Y=du2/k+jn*Q-JPXYW6%<gm\!I1Auq_
%21)+@i\XkBS1ZP".YEr-i&!@l#bRq0]V].MC0pD@aCa?FYN_FAMO2!@?OUiJM7tO/r!P<4E=9K;9pmI>1P(t*r/$iX\=YZQ%'i/u
%%^6ho!B+`=RhRLm<G=,++5j3J?;)%?Uf]M91n.fsN4WC7*n"^DjY<bW1NFq<IWEm-g:/&i?9)R6^skW9A8ZS+CNgU[P7:_DeU"n[
%UJ$r7X)@0L,pQ"SL0L[bs"%s=<;OD&FSD)3\T,_saroE;=[sq:R?hD`7)>A8<A\dUB33c8VVi:7m=J3h_&-%OFlo"U^Xm*+gSR&M
%@((.QrB<ksYAee@TVhquQ-rIaW`LYJY0G@qVt@<-n?S:@!`#W[ZIB>uKk?k?e&:%-RY>iFZ``aFc![8'K,MqCP="K13o/(-nd572
%e*SQ[BKDA%V%_[08(8"=8T`pl)s%$5,tL&.Dc)^fpe,Ym#5Me7P#F<\-[:DG2om@jIoJAJ-Za?.2osP3W,@^s#<#(pK3[f'e%7P6
%UBgU00ph-9Fds+l\XVZD2D_gp*Rced\(Zb>P_bO#>ACe#fC_`Sqb]O9;D,iOVnl_&iHsWoVg7'sHF5RIiMYgs\Q1q.=5'K:LM_kU
%3EY^R;GEE?4AgE@ej'S+VUi<1Km!,?'j'qBj'jL=V)Ue)G$A:Xl2Bt!\>He\g/WUG>KOsO2VCWMiBhZ9net1*L9lj$s698,Ul=I0
%.W6AqGatE$9ktE6D@HnDRqg-L>&Wg;>AKE3'=4MUc"`,sgV4=Zc8@HO3AM@K-pnZ?,\(g0Z=Ma^QYA#;m/BZP@E5qTV`;f:bf/.=
%7Gap"N8tWJkJT^h*[T_ITn+nE?ngD&"IGUIM&/%89lo?.)YN@i7&@Cf3,P^0l4rSe"7-OG?F*aJNm[k]Bf"OfO42>@<-Te`9F;S#
%1&NZ+q_:rob\0o@e4TU:#pZc%A6G&B1:&TFRnCoE/S8hm_(7h%i".Y`n4N1Ye#g#Qd_(->!bHiC>T]<HBJAs_O38uD;kZ_)8K+cZ
%X]utHAqr_0En.1qE3:[o.`Cn$67d&S#;c&D,^M$N'E7<*9`M4Jpe$nfb+O(8b:L<nAHjB/9/ldk](%Io9E&W?kc4c5;_Y&E3<QjA
%T^TfOX]`tqg@R#_^JY%qCiP)LqlZKo3kbp&eB6W>V3WS=ACG==DS)"mJ1P#MI)oG`_3A.RFY5^T2iSE;-p0,jp`LQ8#G%][U[gBW
%Vcp'FDMfF"-+@(3WM_JA@R\>VP["+Rr^eh/TN&;SAkM_`Q5g]6Y`Po'RZMj)>ctFa"+`23N5D=LgS71ENP1oQ?a#NOM_n$oI"m7(
%?W6tp:K+Rs7-dc!c2'ktc'F6`<'5'=%H>qg(TDSIgN1;,qaIV)4\;'4kg<@A_N[#u06bL1>c4?nK3Y<8^+^N+$L'_h`YZP@j\)pS
%Nj%4rA-'l8Dpu_@VKS3`b/LG$T`;loX`5u'98?uV20[5Z/qpGjlYA,l&?%Iaf%f1@LJ(3PEiiK54>,\W>^M*d%/u$J=Ge88]&cO3
%brJ$cE*N`h\MD*u38IWXXX'2QCNN%Zff6$6l_c2W@2/:g3:^2Zq,.WP69^*N$Mc"jq3\/+N>@W5Q#`o!,l-QA-2-Sj3V1\4Fsnn$
%/p8$'2!h$[f.k9e*U/q^'2gU*0G:?,J6p$6)*fY1H3'@YK+LQ$4V<&bbbI#RBeunCW:X#ToW*r6BK"BK3iDA^`RNe.:Qr"sd^)]n
%6IMhNH%0[qVg\9iq@k<F9"o_"3TWo:>O=Z>h>f.NND&E`/$10;'(BH]l?1Z,KMK5+H:eU+7BU>RL1o$&Au;D6A&9g10`P(Vn\5cS
%r,:p_`a6?QhHI%5,&bEI1%@PlWAT>.[Z3.=4IY\k''b1@0cl;DnXs40)<4#rOE7Kbai*Y*l>>)O\]o+4NSr!)HD`+f6bS=tMWa##
%H_KGMDD]f#<eD5gJuD8s1hJ7;,K63K'riuCg6rB!n7P"?C8c4,KEA@6$T?2jg$QGpDL0NY8Xl,N]fMj'[@+AOB'\l>0jAi\(f.un
%`5eOH@:I(u;#5GoDE'/Fnn:^sSi'^nN>2,)Pt,=nXIH3`B\5-!d7D0-nn:^ubr]cX??nAl7q9tZ7X6hT7q5^b)VQ`f1f?%a2'._p
%a@.g>R4*/AjX"N4@.H*4+qKH?a_XsDgiT,Ojlr.3rMr(27=+l#!VFm_@0nG+)acE'.s7`HMj;0%T#0)gC&c>&Z,Wb1X7n);ejYEu
%]0_kp_l(K5<,Yf6p7ASaPeB#tp0J)k7G3$o@.2@ubFFj:2a%p`MFd7d[.mO<V$oP!n0ruc)19,U72^J%Ca:o3#2bB9S"GCjj]#/6
%'fI/#RHDoB_k3gj7k`okl:1Js`6)TC'VXgW>rtu\_G,9:jt4P_:+@nUrUPs&dR5bajs(%>$H?slYtR3'c'%fTN>\k6leerrB&F`S
%%=;[+_a=d;B6r/'(g[Yp>75h9?bJ4Ia(VFtCZ<rl)MN07f(r(4"K$u7R)5'&']O?8PJE#\=js\H9_i[?MTZm>[-tpOo?4Ad#h@uX
%?d?[BR6n!PB'W..betTGm&)gE><d1E26V>a<P;9kT2G&%j5M_YilLNXr:N6/k1un2Bf2o.ah.%Wm2`YjQ!;Of$e;(5C7>Q'8';$b
%1-H^^io=^,l!kY11ak?2LcFpO<!o8Oo^#F(R$e_LH6(m.]/'j@-6(i?c,HK^N\kZ.S]X'%.=;<JZg)K(Wl6fLVjoS,msceaVC.XD
%2-n-qFaOj+X4L7Rig*3-Mp@Cdi&F*o_W,*`%oR0%a&ct1eB(VK@\[,+H#AKrBI1,kg8V!l$5>!O/uIFhDtd%bq#RR4]?QS=-qfSY
%V5?a@;Mp0-/m$bl?`B>g=EJA;.##W>:Lc'.a2^OSPp&=S60#/JqkN=&=aks&Vit`k,0a^f`PuNDVEfiFmkg:Zl^&QkA`;2i(TI,P
%L"kn/$m]@hS:up'ZOhskR\`Q>1sAXOqa*`G9Tjl`Q"3Ve>$$h7;\Fr(;RlP#0GNX+8OGD@CMR+^Sgf^h8YK<_8M!I`Tpkm]PhF\O
%B.4TB%5TIL7E)#!)nV)e7@>i6B1)aBCrW3F6H"`<ULkqj,n2ZZU/=^5/4uqQR.So`X0F(L=c,X>_p#KhqO9UDRDtV_<-*<ke/7@R
%:A9[Q;FPi0R@(_L'[niM\(Za[p0ac')H+F1K?FDRPcRU7edIkBECW[^".Y\45@/F#d[et=5I:3<aNLEN;*]=gTM+fqnlZ4/'LSOD
%:'$me3WQb%g_SA!2JV=bn;,)HFS*.NgOi\`:sn9s:X<MbC]'[:s*ELomqhgU?F9n8mS[4k`2[kVfZW?FS^pqUa/unM!3*TT1A#S9
%QPoVd\m):;:8P2i71\_Wl4X$L.@p/-HKe9RlZWW%89X/3=<#UOjBtdpnN3%F3rQ6roJcL,k54VgmrH\H62OI.CVb%9<NH/&d;QNA
%k&WD#)Ih4+>V.7\oFJ]DU)`Nj=uk:NkL\&88hD9G'Rd7(r\+(Y(A^7=cur(FQ[^P\CO*Bh.4(Etf$D%g&*`^ZFgpTO?K_GW(mB8m
%h^d5C/Bd[f/EdV(J#n<Q55b6R0.lc.55bK8Dj])!:?M.L/Q;Wf^>-a^iFa%oa0h7beN=qS.pSIg33LKLd[o30pZ3o4okNS#@kjJY
%WZfK9Sq_r$f:sf"pO"q>lh+Gl;eZbO+o1U:M$2,s[71WVL^%`5`[e)-QGZ,q53S$0=noh[\Uaj_AKB7IFSa*:a/0B+#qPV``M(#!
%m'(B\$%##!%m8nRFu&Z->Md@QYI7Xfcb)Zj%SuT<`]me/K:S-3#)5YjSBb5AdhPt8YZ>/6^j9`@l<i[Fb?B9kn6.Nj;0]54>2f/9
%n_,ZR/mnskVVqecdTOHgonS'e=gl*VQEX'cbA_@PQ@U,'J1KEH3o$;D-!N(7aJ;(*J[PXI97\uFZ(p&3.b.[SF65H<hkm4`IVYD2
%kkGnAQt'Q5*S'NV"Bq^4Cs(-$Q?]tt=u1l`$EY%H?XC_6VQ_mTT:'P0Ud"+U_iV_T+B_V>eern_:t[0Qgk(Ue"jg:"p?dF>nma2s
%<hOjEd+5a8-7=W#32[:QY\gI$/#:c85&aK'nUo3!kpWc:@!s'"2AB7DYZ>.[Ps\'Z,#=!V(q)+1XA.Gm,[*9\e(U+*&GTWe6Pp04
%'j=rLX\FN#$EY%H?U_B2FbYFJS"/a(TXIO"kItgc6UV&B1m5/qJ&Zc9_#!c?RObUC@'.4JJb@M`eEl[HBs>#[==^UV@'.4jC*[P;
%Ge,_6$O,)gX;+hfYaubiRN7tP%G%rhCB`8rX;+i5NC;#$:R;9$Ff/)f[0#[;K/LZ"E*]eD$4*m;YN:QE\';=^D<hC-!?_`AYCk04
%]"Y-4=lJsPm[RLi?k00]RY*P+kT_HS7W]-CRlc/OVGJtK@/;o<XmRbjQrYnh"djHAdi`jhXZNCIQP5cS;:Sged2WP#4>FJK6^Q&7
%NIX-,BF*Z+Zk[7]#IN$p70VBP[$@D4H6d6KGe,_6X*]a3X;+iEbu(T!9pb*BD%!]<8Op2$:6'N7l%6I_B8+[`^h7dg;;njuk:7t0
%>hBH*eQL1N9SKK^gh(Z4#[]Rd_$n!,i<P9$QDTm]"kqQ0D09>cJ[PXIX+7XXgDY[PV.%qI!bBcQX<<7ogU]`o5hd(8XU]BIWfRbq
%g=HOGF`UE2[K>hHJ[TDnQ9@mM$q&D-7;Ms<e>k/g2^foNcFASlNQr.,A*^][\T3`Zd(U9/WuI!)Zk[7]"ge_5kbqR(99\cUDM&Ee
%aD>k4R1's!B*bNmR+WBBi7T>VTWLKV3hWTm1+LXOTWLJ+qBTj"Ge,_FWuI$*Zk[7]"gg-me'KUS3gT/Pq$J!iD[a;@9K;YZ]!QbB
%>quge?RsK(TR@9r2UjTS"kj<j'kgC8ABbT[QNh;Lku!#?!c8+pdjJ;)_pbGJ>?uPSTWLI`q6[%qZ=\li97s[ar2;kbJ[PXIl'&4%
%iT\d`X_pNVcrQgAg`t8q=gQ#pV*S>ALfC%L5[.sVdjJ;)_pbGJ>MY*7TWLI`h2%RbadO6A/e-P"7\g*&"kj<jVbaU1LSmdt[^m'M
%5[/fJ!q#69XP)Rsd\*^[6n6PaTR@!j2Jk&l7-flQ&Yb\-l^UjeCRUsEdA.<'_,!]F9Ie+aOF;8m2V!4H"ka6gY5m7A@)Bi,7a'/#
%b/^La0\a$`?a!nr#<I*O5hQp+gK\f!,&N%cf>;<G'iO"u_JA6LR6J`]*M+kmg?L/`!c8+p$FH^,Z=\li97s[a$E69pJ[PXIl'&4%
%iT\d`Xfau?crQgA5^W>QCNas61h`qjO:&?0BO:eI2:JiN6tX^%SE"<.1GmQ7Z0&,4cPthqJcEOkgOfHY6>M;+f0O1p#?%8'6>NE,
%:S21B%SrDqD06(]J[PVs'q%4%E]#p@>oL$!%7gZU$F3ZBp/D@Km-o+2]N1@@'j`E'^5?8c-1k-/4W_u4lM@7WD$AY9R6>t]2*3p+
%)RS$88-R]S[''Pbl?rmE[)W='l40TkD$AWp!c<o/+<-UQ]!eeDP;>U:L;hM&_LiCa/l:.hD&h@WL&u2qg=H@BFe)!Q[K>isKT1L;
%bpZa`kJH4V*3uFM^t,g.A;iY,N]MJc0R[f*<YoE`9IlLE$;Bc?6QmS,cD?#Z1HKd!fKO>2=QJI"\F-<25)%QHK%B2gNC%E7elVBp
%E+)W]*sZb^3"]S?dj!R*5bX4YM3u_"+uJDk<cEI=\5l[D'O3/u^&hOId&jiXRruWCJ8E#5*S"r[Ai=s(Z<De1)EL837@c=dd(V,G
%X33:+Zk[7]`?ShGNEjuA/ducHR#Wk:FCjdH@HnPc9gO/81`n."RU^-1_JFqZf>29GJOX(V_X&d\2R=DC&Xp(>_1bT*Ks47%kj6A@
%1Fh`piU_3]fi!$*'L"$p^-"TSVJP0V,C2Tph*Di8NbDJGRc3JkXB*]LT_TMQXDYs)BNEK-'d'hp3!,Wi6J!2H+X"W[kSb\p/DW&@
%f,2C9VMYIQTRC\(<]=J%BIhHD!bc?Lec+BG@F3Pli.R4:Wo[6%dkM`8N$1Sc=KSh()Ha+J#,\V.@J,n5*ups,V"@EN*kn+o,,sVs
%'i"@=!X7')L1td;;8KVkl)V@n\ZdW:C#*ba^4SJ"Bnk=7'KRad^(*3)CPiIi'fo^<iF/4eD,B#pjqp.U!!,@IjJ<XIdB#`r^#4OB
%P3j^F^,BZ*gPQ?F'kgsn95SC?DUD)^3:h&;Ei+t(A0%)O)Eu6hC!a9LgB\Ks/%!"p>-#i($EY%H?R:Gq)g$Y$)9ar%:5]-llk!:R
%VU4NNUFkp]W^Is:XD\0AeKmWfedAL^F@jk<kt7[a)M2:GD?5;@]7?bQ%dQBp%dkgH-kHR7f*6&66W!lm!plu_6C;JSL<NcEkk/5M
%`J!2?lpV^*rSp@;G>+m\>+tV3cs!CFM@-I#>$pC$;7E>V/KERnfJX_-g%5aU`omR]@Hn@daGm26C^&MDL2:uY7R=J7lmk?0@Gtd<
%q0lT'Uan0g!RQdo[].GH&M&+"(D#u*Ri"Yi5[/g5F[00eNDZ@N5l3$;&_"&,H`\0UF-B?@[IB'4Hnu1cMYQZ6ZIK[-L"=jFCNW'8
%Ts[5Q/"ec`cCA4+X)$K5L"[*^eEG^p61c54fh2NVqoZ>KCB`;@!,H^e7Y.rKlRUe(F:<q5-IaSYY7=;G"31WSY+=nDons0RYD^io
%MMsl9L!j%BJEWj?G`:gA2J8&_/Yb$qg3%Wr7^I5idgHEm^""!q6L/E\[CRQWcs!.9V9t_5oXFmgQEM/[%)QUg$L+bFJp_p2\ot5Q
%qV!@"m`$Z><[`A22mm?<oTEJ8j>O!^9OjGP,j(U45pC)el!.Zios%\+Mc!TYYke]/D;fb&l-+mZUE0l;m:_10)V<)H/RN$0S1\h\
%q5Y6:?PBV[FYQAE[DM716s8j2Ti]+`(3dk"i>@*skcHb2_]8LaUu,[uD+9753EH\&"kqQ0D=rc>"kj<jY5m8X(69mm7gLnnSR+?b
%RM<l!C,[@R8J#^_jL]I&S[s(2W'FR<p/OBT1XOrQ[J_rmg'<n$7Pt87+B"'q0`!#jD4dViK4q!8$HJl?2jVg4P$UXgQ5Ks=mS`&d
%!qG&uV:eU_0ULO7N](Y6>dI-fC_;LKl0*9'[b$0;.^daE7A$1G:+N_8\*CBUSn)@"3.8R)5CX8+q]`QC7@6.61uTh^!_ZPmjS2fo
%cX.dAk^<.INb\EGrr-]:e8KHl^BcD>DSW%:Qa<?,g-M(ukX*j1BsR!+\dZV;l*Vn9DKA/lf&o(_T4sTCPt"DEjU4mE+HCg]m/6i]
%`f84);[1S0T/%ard_l$])H<Cr"^:]2AdFB"dr[4S&:B;I3@jpSY=gfsW"&dOj1g&&Hhg3+6=G]2,;)!+s7Nt^M]$pZ#hjHueP<35
%?<NL]7Z1d6k*RL14SWu;>d%U:s"C$4A_kj%/bkkhe4Z>?YLY>9D&ASLUSWKk$Q=MS!>Q21ltjG>Qb<E,Y@Qeq\Z")P^nTS$2_2q>
%[au]+K#5'1e,<@K\Y3&5j[s0NC:WTZr)033D8B&&?fOB<57Ps=HN$44FnEjo[T3Ac61oiW:R:t@<]a_ur1Z'A?k"710B`),Q2Gdi
%LC/tA0?knFl_S[+S8+FCU'hXNi,PSoL(:OH9S1J.GjX,$9aXAM`G\X&Y!4=Npn4E%MMcacohqoN1c%:<6+B$*/H8<Q$WqR-"<R@i
%F^"2/`<=!6Xbu=_b=+i:pJ=tIkp?#[=?"U#8aF]=/`kR*mg5*E.7!H)[8NG6(cR,aZ\AYgcI0Gi<ep2C]2EO=V4)YDj@$dB(j;:f
%OP(lS47ar"B;n-C/34@_g'1Z?Q5Ia$5NrsNKQ+>t4-mrkNpVd9lq]+Nr_*T-/9!EUjQF&0#%_<!4)+.A.q%,/@^#O"M:!gZ0G!H>
%B$&5k.s`rb$eXnpU)t1XgF\&tFT\1SY2,LmA`%?f9'0TZM51;J2.-$h1<SUg=QQ634h&C4-?q@g?3Bf-hJ$UtS+TNdGhG]i??P"/
%jqteKd(/#]:8Zu.]On$@\`c:U=P6u\&rX,dDQVH.@Gjb-T\2pTMZ5?n-J(uJNYQ`,mGke4/8%TJC;$%_U%+/p2>b)KquRYs"s7(f
%K@[_TqF7n500HQ&=>r`Ng^N!H,HHf]1<Zn]Y\;s5>Baktgt"bJSh)U]HVL^*21Kn>6gpXjAtrUF]>p1OV&c6#r9#*(>j5L(p-"dY
%o&kL^aWf7I](SAomkcdgR-1nZK1Vu`gR4E2JOODL5.L"2:-7mCQeADu6HM$j:l:D8h+kQ_ZFTG4g0V,V5E_sIhh#Hbih7BrFZ/NI
%SrH5C&mB0PZ@3tG-c+^G&nP029+A@8mTol0DX4s)k#O"7DHa)<Db'+Q\!>'Xg@_\nU"fcFD-#uCDKXiPFK2I!L#d:38!PL:hKr8Y
%DSeNmpGNImR@9sn/N1q;PX-0c_j;oh#"t8=YD.>HY@m-*fN9P..^fb9;rdQ:f/`B`_gCSFCZ2q`IkCBi?7n,K[9C7<1Y-krT_IR>
%Yhk1W)&I4R3Tr:<+G?l@qm-XfeF"unfg(%0+'?uI-_]H"r)G7)0@PYEd5CSF:VMK,5ArS8Y*R;?pWKW2ksE-g>BEsgaM9oZZ?eFs
%^,sYX'g'r\YWCWd9q5bh[SO*/=T*->?-,?Ugn8D"LI8HSPr(T1L=cWZ4i5HOj.CM%<t$NNP*@BM.nWC`jhRq2E8/1DG.ls;EW*AF
%5^u3M/.D^J27EpLZLRAodEoq2q[,Z]1p3u%/cZjhkQ$q$3eHK(m$iY&JC_T$$i"INj.AfSfu@WF/V(.X/+:f?8M4!n%01&5g\_03
%I#=Za59_9o:H[($A\RpIL)_<V(:IEtob6N`1Q;CDl[_SsQMj_Zd'nqTSjQr=@Y.<a)u>]gpQr!KT2)`:`nl9-8k\V`GOkpK.nd)+
%Gc^f&Z(DjDXf(Zk^HrF*FZ6>pdBZo4'^DM:p#Bkm<J#72g+<omAHC.TOVq#r$&cILo!%fLLn_$C9&gaXjuaQL^?'%nghHg0K=P^3
%`YdlL<.tAI0o(h)iT#L_bPLa0mA->1/LK%3cb&"reN:=XHlXIDD:Ff(b;S5O`p(Hfp))D$rT#4SXeub@HsCAm\@<*]2ZGt[PI5U<
%*isA`NM+VK^cl&6c1=t3TB8@f0pq`fl)hZ:Q2r($r!!):B+)F-2>GDS0DlO8Eot&Z]_'1iF@e3\[#*[D5\0kh-BheG'uH2r$NgdV
%<N^QO;/AB6laVu*L]:DeROu^(A"(hBIf%`T`Vjg3$Y)`\7em*^[9?5\Mahu&XjY<5Q0]k'YeBqqL<Vmro%OUs4,7Gtfl+W.LXL1'
%R;K72D*.HaZ3f]XP9!b<jT:`e[L*slcrDm&&$/csDV"tRR+m!fe]h2\CgCS^5.l8@TKs&bHpMj+9aYM]Uk\o57l&1h7M_Z6.'t,0
%VCi6#NRi\A5]3h;0j3`K#c6s7(gJOF"%+Pj<S[.7QTOLcf-=*kN3(SB&68F-Q.&o$]=0G2+8bJnTlj8TqFRMEC:fX55tf)Ua:0IV
%+2'4,S(W]jEuJ#R<3O-Hd7/Ip(`uj:e6HCR/-YpH0)??%QF$6r"gkT1:_"t#!\25n^%oFaC?f$);/]IgIB9@'L/5.nA^E(ES<,LC
%@'LKG_d6I"aF_/rE7ud!WhhpIOA?WAeQP>:)%*dfk`>UZ#&jlI<co?1L;PZ(MuhX<]c&BP6P1At[DIa;5pB"AjA$7j)FMZ!bdT+i
%BG"fu5#;K7bldX//i4K@AW/*<C=X?!b+QaU!@;S^3A`M,U`?ctA@lLT*P9SIYR*uQ9<epV7HnucY>L#6)cd:L/Cp"!V5'WX-lh\I
%^NFWrCM1i@&bm^]24>ocg/.:VEimW,\0d2aZdf,#'/"uf7?/msA.P1%<jq.]\nK4s081/l3_Dl_&/KrDV`(9X.`;,<OMUoU#6e=E
%0%a(YYgL<c?5kKR)Y>[$O1t:0'bgPMs.;b=Bk(*9qA!f>g(o'$dF4\]!t+lDAB_C0Df2>%dTJE$-u=.G>=I-TH%lqShlgS(;&Y0K
%<2)6dqPcln1IU&M&hVuopD_q/iBfu.8nU^!'GXC>bVPBeBu[MZTuFB;D4%^6m>b"`RcS-3`Kip2:-,f20PQc*I"tEEOo9VrAR4qN
%N\36<g*p=G't*kgran@#[BXU(a0HJET#RqR)U5cqfl-/K&6adM#B`9:!r#[Yim7F^JW,kq\'IC92!M'^"m*A/'qm:47gB?IQ%-I3
%T%?*p8q"K&oNQ.,dj!C[BA?ZnSpUr26=>*d\!>W_\n0AWkp^nT0`3BQ=IR:5G:XrMQ\ML7_-F)`3=dp2)EBBH,n;56jO"Jq47'I)
%l)D[4%<PJ1P!B_R8uclebHRm\Ih.c%W*%9K(jBdoR1Xnm7+iX==IO:d'Sc7TKr+YUf=[0,HJDYfad)24+<cF_lF$:S>E2j,Z<l+C
%1V<4YGd@H)0>uM$(Q4h'0'+U77k](j^9qPDJlfh!%K+e)^AHj[PL]D'+0N*q(1%miFr0acc-;0QjjVqSQc2#oo+0G'DRO]FHM_0h
%]!o?GG4XCIq0[JbbJTmYAu?o3)u>RXa%Z)rVR6aq$E"9crO%o/fuIm/$]W_@l]o0ec)e$`he<:k?FKI'0A^NKXd\+_HKFCt;B_NX
%GhUWtG53@>-jmr(AasK@?23qIDgkkpaBd<)>Igkgp=YXBf"Fh`@,?C*s&"4>*h"OJBJ5GDeokC[-fWsOcX1^Jle-K7>E+tRrjoOa
%?MqCCgr`qc.4i\cMY!>!'53-?X8)X,[o59^qHi6`CXis=-i(+BqO.,s&gQuG6(u6*J$,n;J,!>N"J'G4IlmU0LJJG0(:M@iGOg[c
%O8HJ?`HsJqM%=L7"3ieik+@kr9)Qs3qO)W9ZC77=*^%QZ?MOM1D>iGJik!`er9W7_HY4k*P'`4].Shrt[a/L59NuO+ZZ?*CEol'!
%EkXU/r8D,Vad5b?qr#:dADkkhb0)RCR^#oMI9k%H8e3SH4Pa.C&f4oH<eORiSJ\nLBo>,7?Y3`3V8CF,3uC!JckGjWXh7nA?ZKS<
%g!8(B`<@o%'mga[LQC22C[53*pYKg>3#o,*'t-;1pR[67qR7iQn&h8hp#CC+WSV9q3FM*>p%TS'b@g.SoqmI2odkUlaBJ3>oNc`H
%@pe]l'UIP)#K8c#4uKS_$buI+[87HK7Q\>rA^W5-SeY?*:TNqC?HMd($QIu7D>HbN$RGM"p>jo5N<R#br:HsqdJKiB/*.kV^X6kP
%4bifVo/p[j9''E7?2,=\J^$F8a&8L#1k$fZ325@aGcg/+ou[&-arM7H4=QdO^&#:u\e"8mXlHm/<aQQ$T&gI.9'tEjrR+I/:cD2R
%EoQE*Hgjl-e&I13cTC)68`<B7laQJa2S5Dp^'H(QA%ci%YYh8@KmMQF:S-BHGqWe:CPHFZNnBP>H1Sqsi``[6p=<L*H2jCHal\kc
%"Z,puiCUcOI-Viu,jXuo%u*\O/li/#X?:d^R4f>U/?cbJbOEiT<fn+[Z]=?e.u3N(\\jd$:@Dk>c":eUKA$:O]S!RY`3c/i9!3N>
%3r=q=S:An1[!lWSJ(cm5<Z`-jAog90p7AF?4cps%%`e9TmcYrAR9Ntp?Gn/e.U1R%+^?)mjK.&?5;-@)G/*-_MX)WCD2l4i/f3-_
%(EWrTqolri^1ofZ+'!3d\"A,l^Grn#[&Xke%.qHl/Sq$)H-k-3<<O7.4'@#>n*P%;\Is9nBQ#fs*]qZ2(%ZS"R&k+T$,'YZ<@iaI
%`Qro-UO-2u,/.*jjTcU+VY;1+OR5/UqXW+YT[hLEJ8#4841G05Z[Gfea;oYX=]h[dSM/+m:*.-REecaLe$XCT>AeGuIe*T/=ad#]
%HjN<=Z*@,TXVW']b9(-O43g=[r9&^*"^3<S=2OT^cO[Jc/"]#Lm8k6fj5o.-0)u>$RUZ<`EAmRVj$=-CM'71Ai+VLS4P3rsrcuQt
%>KGh0Kp1<0Di$&S^K<UEFQ\T"!<B9JYdF1Ff=-;:@"Ipfc4bR&0l3n[oo4[CdSh"(2t(13J%5O>fi-(eDfZ-kCUNh-j\6V\]7WN^
%$a3mM==gUmn43+&EHCud-HdM!XNfk-0=<@VfB6h@Y.Uu&XI<qnNgI]@Mi[c1cWcLrVpC;,GOFY`drWbq/j:)!EUQ_RFT4j^^86=\
%g?I``1kXk3q?7qgMU@XSpm[b>[H1G[:!7-r%t8("rj)[5`M.LZXmb45DkND7lYLWj3sUh[c*N-"F_l@ACO)D%AtX'(LIbaF.`5&f
%)=!m]f"q'd2tDl\q;!p0pDGiE[6:;=Yc7e?+oHMKMEit"i&S[No3`QF9fW>12M]r/!Aa5#RaI0[5:f.!5KNQ'_&O4s_\REj;$mPK
%NJcYCKATOC1cG9pq8.#/EmK?G$Eka#cpEa2N7u=L2kh(dTCbPHfIA_AZMQZK`/DQY4ae)?+16Y!d'J'rO['&\p`%9ocLa#C.qK#K
%7TDpZ;[#F5oI;;<#M9Ia,$>8LO=CT`/ur4bRurb10<#F2(Pq"uk@"P[&[0Oip32RT7VsFmQ_G47dmqhtpEM,8(+lY=)j6]CEl&]V
%dh7Q)V:J2E5b_]\7A-"fjQFI&.'f#\Y1\lXMr,n3E0F)=5mRTsN[5$3.#!;/?kEA8aPgk^$u7$Q4SM90G+kO-Ko>>$!m.fYN!GmO
%i!FmdZ*Sd6L,?bfDRS0\48nAAUHmU&bsW0Y9#NON%cBgW&<5Wk+dZXe0hi/K@3k#6JjTh_]n/2+Z5L[b7%n"6%RXb++dtS50<2Ks
%<RIuN$9WV\XEW>2fNiqCZnGoFbfSCUq^8;F5QuVekh=F)L[SR"TGD^b3Oa8:'#Eb5Qibf`1UgOMC*,WG>LE044P=uRiC1!$0&DXg
%*],ug\kBM@(GABmN7>*t8U(lS-(+l/eZ6@U&6..LTDMc@cjY%iXF/_Sk)Ap/0?J*'ZLieY)S>uH',ui;-YD>fo:KX-RJ`26gTMX1
%boO1#/iK;;0?klZX[4h_2.s'(=@)hF,(ib$Yk@h]B5VoV^DAAN(Q#BtWu72A,d/qV8?A'4mZU*/jlLsMAb5HdIWa`HMm$?q=7>$o
%o)&-(mX2@KlSX)*Fkb&kB(7/d=ut>cQ4@XfTa%.?d_XXjGl-$<<B,9Q3`rEKI0M.Vppi"o"%0j#\]]4B"Y*rqV)$m/6']Yc^VGW[
%DR&]krR#rQLUFL0E\VbFReU@sA+JtJ/l/`ZY%%\Q,=To0\IY]IHY^6N*<aW_22/2C#LV>&1PGllaEej&0qK+T(EYf,/\Eg0I0Y1@
%pYku%PE5$&Q"NmZrV;%b6DH4QWeBna%LXC`N9p;WaR-[6.=bHYHg(+SQ@eQ5BWNT0"G163Xe5pFUr5br@IHYX?"C&_9pO@q3p5A#
%F^V3HV"joPR8_c9-r0?rO#D*u1k!j.l)sd*SO[&`=]Ibghqo,ChEE+4L>AN8+dXBUf=2b\'#D;a4ufGfE-_.00i@lBp$o`T7]l8f
%T5uW$&qSSeqb*Pu;;-JeJ$ZTggjHbZmJA1j+6RZ_?6?g1(*8`n0-Zgf5L<6"cTB0og@hT-7V(7t]1_clkP*QR^>)k?nndp].$1X9
%=d[+nX8Me='<jjt:85_>N)$*cq/cN!*Vprkkg5$W/XJ,j)K%F9EQgWVp=*?EC#=m7DLH3I_$Y'jh`Q2`cM\WfE%':<?@BHo(@TqI
%,[\'.jpj;m5@AB#2YFJeGFW=fT$DP%%gDDiIe!?;eY/CSh>k8V1U,h=k71]87h'XS[ds-#2Wj&KH1gUJ8S@K^mdR@U&N><lNTI0@
%r3Bp"O'XAl=P`@lEN7"SaWOi#@C^=pa/_OZ4l&^gU0VcW1=iS_K>OnX*CS)<^o$QmNcbP-o',>sUV5qbZ+rTg:S*"4qRF#W+jLDd
%Fo))o=M<IoQ(6_q3X^]7AZ(XG0/'I[^]&3omTG=rh-t6WGA`!</iJ10.tsf1.r2t_5/b)s95!+jml7=!^Or#0V`pWbJ')d&fCKfj
%cZhbmH#;\f42rWbli#DSPK26Gbl8MO+%h`>s5$Njh;-9CIo]TF?6#T?/Uo1o`G1T@Joj%5a0^Q(/pt$4;!"t,gb5SMDj5LY"EX?P
%V;O4S[n4E?mVUFa6*agAFguKOl@O7^h*-M:n+lpA,H^[IE,o&?fiY3AFE2a\pN`O@=+/Sp7JY6Ze%'Nb=6H`"/\QV"45=/[`TU-9
%TUtSTcEB)ASPF'@J*H9>jdUZ"'EA&O>ih*;e'fTSRdJ.gZ[@%&4BaaLl>BUOp@A?_q=G.,g<\q.0DZ0VXHTuO)lHj4in]2^K:0.Y
%n,HWDcI\UW?!jhrm4CK$+P^n?a0-<NeI1btk2u@4-gTIVm`2`#L;S>*o8?L,@DAd+*aWBf>X&/?<CF!Z:Q#D$q=Lo$mTJ_`_h-)&
%<VrAikmK^+CWj>.WkJW3@+->nFP-/ko\hSWT#+6?s)@@<Q[m.hm^:Ur:NouXbJcKnH>\/`>^sHdmWk`kqI6^5.=EgbQ1jtCk'Oet
%1]-(th1;+bHW-Gaq0^qBnYOn3[H#WirA4oAp<$QaF[((J35,(:'[)L&3p9/#a$$i$G]a_5c`<,pcQ/^@YAP=5I;1#<>@be@_[#oH
%MF[C^THt%@55DMSm74cVNmup:he[3Nk9&#'mlW<gk7/"Ege#T1o<#7RD;WCrbJpsnO-#iTjY$]=ji+pmHL<;^O)%rAMM6aO*dTt\
%J"?2d`aMV%qkoJM4b!KKk-]Y,86(FC\2Cd090HI[/KBL[gJ\3uW9<>ZX3V^Qo@9<'TMHS7rqp4%A`!?0p[*m:?d+<(GkJU=Yj:V)
%M2LH%?h2b=Xk-sMCt.JQcs!L1rqI-)[<&R2NI,%sHubqgQC30a2/[2j545h"Y<K74Clk:'H<i.f0:[_ahrXt3GL'&01mX5.s*hst
%9/\niOkBQlFo;PRRe*gg3.>,#F1/hB=,XV(m4N[,]B"^l-^S2D07>:^HF:=0'fc0:_.%D:S]hn:F8L06.=FDk)o:KrosC*5QFGup
%S5,j7l<Fi<<VIQN!.EZn@*KHnD;ALd>"5P#S\:*'26D90'43gRhKccL^s7@d:H1D:+QGO7`ohN@foYUmGlEg^5fKGl(*(Dtc1M+]
%Q/__m7F!pjo(l[tYd\[MS84LB1[i$+2'`.CN#&7n)G,L?<%g;$b_^t!lT+b;@Vp6Bql!:H=QI:FqRjR.OU\(0V;45ZRIg6`)tU2l
%Y6ZO-EJc:BdTR$NBHCOn07Fnfbe\I/Iro^%Fn>[Q_j=pkXC()SB=j5HZjHst\SAaBm#]2XOT+_diA2Kfi-abmpL*S#)BNsh?Ytmo
%o1lB7Hb9%f6t#CGW@7c)X0oB7aR5Y%`e=)S[88M?I^EL6C1PV@V6O't,LdIS.D>>6's3g@P=Aut?1D/QXt8AqA*WgVj,NV$EW4Lc
%';&m"f/I()i>5KlDN>_ad\bNr];PI_]Cq;Q!k%`ri@i/`^S,8r)lp,DH*b,L46X?-HSlAk/8STk>-NkF0@2*uSQDrQpRO<WYZA!?
%]Xkkl;r57?J'J-b_fk<<V2aO3MoDi>iOXl'*^4iKFi40lFZ4g?j?]D$4&ebB^]"5^?&=7]FB''X5&@*O?//g_NaOJH4T5X*q:=jK
%P5],Yr(qdfBm=p0P6YS#%.]eM:.6etD1L+%7Q(5+a51!.X8E1N3Yl&IcPQ,)G>"N]jf7_PBhTK5#?uD(VYfYdg\m@@?c-a;/#2_g
%jPE!_.Nq-^QS)A[S6pHng=GH3eUB"Ne<\PAo':57S`9B^q?9K[&V^X?MG)Ds0-<=]c-V?7K/'9pItm@M_gLG(60"QeIarmN4K<"[
%@a.ld/Y'\:ZlY.eDbgl4JEof$g_c)e"t0eTRkl-MX?5eI.l9A/p1C@bOV+8PD7Lb>>)tl&/\HE*ok2*FrH:+SC#;Y;ZVMKi,[Zk=
%jl>/%BqLXte9;-+YSSsM8+!L<`O1KX@If@3;UGQ@@1RPI[Dap@)I1qMr+$muff21>]e>oH#F,S:+p@403C;qmW9$gu#0dFEXKJ1D
%?N"$NmB&73G?UP`dZnKK5FJib.':,EKu]ITP#sS"]T#]7>8nslJP22!*PgAn.,oF3k3U(R?$)TQ8e?>]m<oV&hd7oL$_89.[_;c"
%jPaRA=Ng*INdCIKJ%i5"kj'dVqT.96$@$dA3@m\Z.>`B.gs,F\`MJRbEoAhZSc6*Rp\\InL[T(t^V9[&HM6sXGpF?iZb_dL5@!%$
%=SS?""-;aadE+##(Mq0".e)NZQ\FH1hEEL&B.l/-*]:YF@"uj<^sMs%,IGYhcGc]3k_mE,<qFRokF`JO#Jbf]1EX+#horQ,W`H72
%HfZPUZ>UP:F)2o!lSn\KKpR!Y[,/Y/gc_c`5>Q=,8JL?r`U]\E42hGs:2>QIqU[+UB^4pYp5qRXUJ(E%Z]f6RbJ!cEaA.Nk#!"g$
%.!=s,ZZfanLQ8Y/Ei"#fn8:86?s(h87_NFVO4WrNrUd2d&<HI_RD*f#XNb#KB57g+=EY'Z.j+6!jsu+:jd5DISV[<!Z2Fk@j.52I
%c+2gAgi#Nk#qW%LpToR?:[[ate(+0jNRI>`)6K@j54.@t".]<7eDaLB%e?f4D<9M]-[3'QNkdD%K,),-Lp7r1HHn$1*L%9Vo=:-o
%Q*5,tU:,3c$=?TDlFDQ4g/:`di5T(@(1Lhi(f%$.)oW&OgPmWP.XU?0K<ZD^os/UQ*A2g=Ui5$kbV,O;b3j]@oR.DLqZ8FgkLk1C
%cKBs%:EGjO(:<ss2;7WsSb:#3m"LA0?js\2hF)SR*&IT_=VPqHN;b>()Ot?rj[%..]K`Gr]q,#'9'u8lXd.2sc+SG<Hbs4E6IYnh
%-fD>CY*O9hENb#\3@MGg'_O<<p0"#D;-b+Z-lc#(dhRJhE,4E4N)@'Rk<ElbWu\d5;f?8Wl-6DSJJ[Iggaa)"JpY[.JuWf/Z05WF
%D)=_IA?ob-@L'*R%(j(a'Fo0j%IYlkiLoRiBK"&5lcmJRU^j>k9!A-d<H??W+7k8#?H^O%9eXsZo.p;nhb;4/@s7-<k4b9FbHtLg
%OGmDei$:I[kCT\Md.`LR_Crf?g+_&S2Y4@G'uRd<q-9ZR5P7dK;2%O+[>\1ii&B-p=m7BLi1X&4cXgSVZ&jNk_[:-4!h"3P.k5h4
%$:SO<RAqd0qh%J.?qRJbP0@@`lBKSu_csMM>r.HiP:c\!_16a&fCb?+6^:]L;`i#nr7M+&)9a5Q>\[:X,OVrBZa0%j?;?OSP8AEJ
%<a9`NmJ#K-]8H>E7Hlu0eD!UNS/]k8_se#U0U\,f?Q#<]+Xl(me'&A+Y1B*<kYbaE>>(=+))?/"b5=huBVj;:PLhr/H1pMG<PpGP
%L-t96f8.Q<L(sB)[in[?<PgHfrYMVeWcm[8HKhM6^[MRQLbdLtc]*VZ'b!f`1Z4Z5$%@!?"u(Fb%WMkKAC;B&52tm.V3V=ApLMPQ
%>XO;Fo#13jd=$<=o?ZV0,ZrDI>6H(*8KS6@_,IO--%ngH)SR1=EQrgF4koD<ke3=q*'/&_2Oj-,p#u*YCnuj2cR+O#g\)-'3Z#go
%[o+4i4;*@Dr#E`)eYUoR@H4#+4ffoOQV/oh3*Uh"+:\sqScq"00'4I#X/2Er5<7<!CUbNo;Ta\;0F^,?ms=RfN@$>?\^n!Mi5=GQ
%XTVID\`GLF70=g_#69"`$/36q*4b*UGX;(E_j#'%$;`fcC=\I%p9sk=$[3OGPpH'1@Db)oBc+_N8GKh@8W)gNQU7dU1/)WJU_;NW
%9Hf-XdXM^5\&lJO=`kt`VZ%5ci`b%IOG!#`%CPuF_?XO?RM:\BciHC7]=bN7YlVZ;dQJ!6Ej?=aCPM-W3*kA*^een2TQ?&deSFQ#
%*1iC&g33Y_QS0J!(IA"V*1gQl_cLk:f0b1spX8#Oqod^pS#HJ6jgrlqV9%oOdjNM,X0$QR<:>KTE,`.-X*1)NG7!rUdbC=B&C(*T
%I5\R"@A^[cMYAC4Ad\+"opYi-fud<q#9JmnBHXMNi@=Q4YHAZ[c/C18co:H<m'TH=X7G@\b^\4]rmWsS#RCC]1)u/*a+++H?U+Mj
%c,9<of4]].C]/;$^YLBTJ4HHt#\lk+r,%gs&,UX*Dt0R2S:122pKsJ?s829\dnIr*n<I+E_)\E;p_fN7R/X_"r"o8k#6%,rE/">1
%ARFr)_dcfPa=QUMA.?`->U68&Bk/*jc-1>Ifuse])&]*8=dqEBZEfqGD'U!%SQRL5>DK,1AS3SnMj(W,/FYf/EAGmc<p2Zn:n6\B
%8_+fA!sZ3GW:7pgR92O31UAFB_^sB8OL@o3"q6/qahH)9<'bp,r-!BV'WO:kqldJYs5deR+([XKQa<441el>TaY`2s]qeN31s9k!
%49)UHHt-YG`H#R?s/k%E"hY_!X<093&_U\t@5EBYKFZF>R=iTf(45B(%XJWeoQTe&;(LS#Rk+NX_NqD`PY/jAC_N5@1dc;YR?Z).
%?WQF,(ulRqTI@KDc85uB8.h/_W&l3i[REmdo?(S(m4P[FD<Wd#od^nFN[j9P7F4=qDq<DqDG[N&J4tsO)AL"lm"PIk3M3(<rqfE6
%pHR6(3#SM+jh8:$"3==c^&<H9_5\M#lYmlF2ILDCS'-i-r%gu*0sVK$@*u2IN(f/JjtN>kj&q!8Y6gY[2/USEQafiBodi%D^Xa5>
%L.a<&D.>/+C0bF4R<YV2g3Sp9J5!@3*%*CBK-R\5TEQ@D'VkJpP-p&*J;*ACEl`+I;D]l:j!rY@b7p-"$_?>5o&Ws2)\OG&q.(<_
%-d*K8Q[Q:_`fmcST-JBNcS70[d=@h.>CujBZDGL8'5bEQ7#2hA0*gu<eDOG38%6`29/0UT(*[cc(1Q?dgSgr^<"bD?_nPi)X-ES'
%Db9qT!%Qc)*tpaO6B&Lqg=BBW'V&8ZZM6`F0>@(AnV@N73*D0m[N#@IJ0en<p_RP>7)KY"@9A0`6P-F5JQ'J"2:f33.oG>Qeo[Em
%8HT`qSuaUk`L;faK20Fdo3(>>3A0^@?5^2s_]aS^F(/Zhe?Lh_4/#f'2^pI,!Em_U6[(;B)F;rADKL)^BYfeGo!OWLJO:g#VkD1g
%Q5GlHRJIf)0jpmikNeo(nQ$p_J9eVPP_f]A5Y_S%THuNbP%JA*EJkJ2$@U2E8[P.7L7[J]VfbR?<&,/lW5=W12B8Iq*K2HUq<5`e
%+@u]<`_E.2&q+de^-GNtD(%tKN(?3U5SU`"'LW2g`cR@gimYIB0e+)5=&`a!M[`9H$p#900OUaghd_g:fIC8^lB+H+*#C9\6+CcS
%dEF/NoH$\ZNJ4.5OJidmYf;lo(snG/(b6J[=KKB$'Pfa!%6>B-0&WQ:gB1suRa^2)[k%aE\;1/[kTU=kh4kUE5s]LDSWH;CD(&h7
%GE-?BdMOJQ$<aIQLmAmFL`CLn?=goK+5VdrA!cV0Zf28m^`:C\>6/B08(0jC/B\0aGl\dr:otW%L1&#Cd9+uZ@*m7s`5pRPD7WT0
%TUpZdM+]X>4eTp;_8q9i8/=(h)X9/9.O/,konXT11orIP:_3"$)3''(*X9XlLW6Pl.n1k7/_foAF"i9,,ctiq!]$hqgMo!*.`$SC
%*4*7u6jn`=1Us#-C.MH"<#O'rX[hHNUJ[9g6Tr*^S!Y(/h9"@tm!%8Pl&udD#.k&fS0Ug>*?-j6DP72%gS4X*<[IPg]#;I`FU;W\
%BI%:hPn>UqH:3cS)H@Y0eAM/+T`eU8]&"Zr4ujd#,0MqZh6b,I"D"`,F]&KT<J!6)l.pbT;R]2O"X>a[lAK>4VW6a1QVi_S2a*+\
%7j;AW!/]+8,r-U``=-r!dn%>$Lk3BM3H[n=8qOsE0F;Tb(3p@!Xo#IXM2W/Y`@P&$6qam.Oe[q+<CRDin30)]iKLC3G.0jDjLCS>
%3G^%=[!QHf10E#\9Yr(%Cs8iHB\fS/a^hJd-u#q9,?gi7L`COoW\S%^L\Ju0j`1+/!T0QqZPJdi*TGjd^0W*^26gZP^nkaJ[Lj_d
%%CJ7=-HjQn(aHlN0hkrbJg3$SLWoBrE%s-?dU]/>LCKqm6IX"l%f6seerq'VA?$C7<U,rK%=g%!@3cbK8:Hn9SH1V3s)sPD0H)e]
%NCWGn%WGTY"'qQ/h6_cZY_BjLBjg6dV@t1mqie#DL5:t+clM>ac\s<t_2&;d&r%E%Rnq$Y1<jdh!\+VU@!X0V&<=;pOa)P-$>A`s
%%K^Z)CG<%V;$4Pb"71b19/2n%PH6U:"q5<lO[EHML8$Ee*S%k[8!=/mi/U2="e.,>Sc]04/j4hANM]\l?s_4cJ,oniTt(T0d*Nb>
%(t#m=Oe`oZ5V]?Z"q=d\#*]!H[enY2f:u&F=Fpk.-L&sO\(FdGU5]kH"-haLPBc\qOitYJkPtd`alL$p4jtD./;pG\4hBbY4TicI
%p^j`<a*+bKLjCiGi,Bqb4NM^sbKKchWU883X5<F<HG*JQReq!5dV19d)aP=W<pc5XXd!=h"+?fZTXEu4gL9=>1\F%NGo5oAU$G[i
%X3anLJuQrNFBj3U=$(P[p@2-4n:g3A]+Q>O0,trm=R"R2p?cUIXE>V,GF,G_9BX&?nPnm)GgNV76SME2Enf@ed+%sFlSC06CbW3t
%[WkV3F>d*m5$j-.T^*r'/C@\R],o)QO"66M(,k(N1A7pO76K:D7=MpUq;iWe\QHhBgN5*c<7?\:]6Y'9k_34k=2!b^`%-EQAV(7*
%@36&LE3*/Qq0]>El<N]-'<g3]!t>I*fgb/3f8!8V.1L/5>u2G:':?o.XQ=-H?ud5ZHYT,V.+QNmf*BHrJl2cKruie%Gf"A.dOSo4
%9`#^>KWX#a\:^5,7h$AZD!!Db5u_>T,O<pF0jCmnq"bN'^T%VZ1)L7.O0/he]*NNER'&K#lrVW3XN&<p&$\`2rJs7GT%,Dp2n''t
%4DSZ^1a;:98m/hF5`Mb?EBoMGj2`+e=9jrJJD+6%1]XQ(=V[SZ5lHbDXD'kBDW#=C_`8/NEjP)[G>)OAQW/lO0FEtbbP":O/177X
%NaGNe_>R1I4Y&LGg1.Ln_^T>TJWL__^QrXDY7il4$d2Y2-=]VAgcFd=H.ria[IkX^dB>iDTQh%6iO8qH6Sh/TVgtjQge%,[Ba/Vk
%Hm0#\GbPdQmlsWs?/ZLQD1fKiRaE/2N@.Sn#EcW,E&WrJBu\8:,[rPFKJd2Q]4`*!/3Hi;aCZ4]%2L"b6tFcDTT`JN-@Cu-<`,cB
%g3OPC5'bm1gJ$342)'cmMF:)D)Ke[')NfF`[X6(Z\$;79;<]+QA7/K/'p/.Q#)6RM,"@kC_%$EHg9M^!RhkZW7ZR4'6.UaKY)6Bi
%6F2l>*X6g9=UB_mO_j9:SYuQZ68K5``CZ1;7+A^h`2PquYu\^R8PD+kf)(Nmp:hI@5T1Z(8,,_=)u)47>Rn2jZ>!Db.5E$CR`U_e
%'rT$*0-Vd`02<"q4)-3J##V92$RoO.Z&fs,Pp^>Ib?nS0MR=.r`>2?>:+W2#3T)f1.2nJCED8!["=qkd!j\YD4Xi;Ya\8k43%<G=
%OIGBPN#Kc\e4R(NiY*A;6ub+oMoa1)bXtpoTX3?G2AE(.`#p6O`#qeb3"6ga`Zm\'d5'u-d=63T@;LL3ZgMCX;1++S97c_._=jum
%$$cQ7iE/Q9XqJ*TpgW=Zn0Q/iCe"qg9-Df^p`bSM&77g>HYmoU+L"b8Ca`&:6o%5lb@H2E0H7D6%8+sF-5KI1Q"UcgD%7o:K[A)J
%#?t!F<e;+QF$rdq3DT;044[<>%MD\]/YiM"d6aRc!B*a)J:RbG\RZA\QmbA`KIFd\!Okp!dAXu24^(Ikj#V30h9[o4%2dG7TN^PF
%BW-b(Gr-m<enr<j!S_]iVK3V0*7F=#!CgM?GcuqIZV4bo8lR#>&N^[7'K$rYertO10h0CWj&A\VoAJge1,U<cP%tKli/U@V])(KO
%%D$,'M^YS<fL/m.)A"0rpE-8/<?C-i]#MC%'I]GpcO2\<L1r$uKejQKSt).'Q5G5k3LH/3`b8\Q`Y7qV,KJsNC>a,bNol%JjY,5"
%1bUReU/)pmR[9tqE*a.Z'$a/=0FaS>S!b0VbF%+lA.iG>+:X@-AH?;33%&t4gNGu:iJ<d:Ri".*`i-o0E//98[.RsrJpET/@X+m.
%85)%NA/WUM91FlieL-t/M-Eqh9ItOFC&O?aN/`JO?PkYSiG/Q=,*"+WeL,8_ab^:SW0.2B=="':)0eo#*LK=BBci_&P=(`o"]fFe
%:_!@*X:+qm>%2qjjA>!5)C(Z.g.o^oN#\0EW.A0ASrbsm)(1Arbf**ZN!ROfbXFBY1=nT][k)UI+:OR`/TW7jWag1p>XV<m=&d9A
%ntfnM8F1>U]FVG\`"Q\b?3a%s,RG"`ZkjRrJ`K33N]qT@ClLE?\ILNJ?nh5')(*ZjSG>/X"CMojAVeF^5$;O^+@*5L;,.Xt_'DR?
%OI$99B$9Nc5f;ob-3%sNEV5\s`3SV;^MpKe`r)&FN_R"9D&@Q=e75k.J!7<3Gm_[Jr]Y&FFh"@SS&6UZ,[*N89s(<l6mdC_e:42!
%gPPOTB;BjKI(Q1+Q6sJa\:*Lpa[`lg6Lo:9)>4]%d,",iA,nWiUgLns@iBYinZ&b[cj.?))l=%__mV#ZS<QiF@:qn2r;5dsPRri6
%SLk6\B)[2m'*Hkn:BWeq_lO]"g.0Fr)f,dMW[sMS_89>bckVNmO2+0"ZGWZW1Het;pIkS@:iMOA=:7H%%6)\dMiWJoi)lj"rQ@lp
%'5!d88<[pqBG3FePKohM]_B(pT7p]DK(HbgK8DK=jl4mt+Kk6f5D)iV>^+/1-Pf$F!m/q;*hq[87j(Wb-.uZeVV%SX-j!1\;6]Qt
%PpsB`0Pi(qE'TVII?&Mg'1HmA>FNRl<CX@"ojFp!AD>3E]'_oh=;tM&LP(1FlX+jL\$BFn$.FY:)sZU^I:MmaVYm-p+HAl(M6*,P
%08?#.Bu-&ZTp,(0.S>%63GcS_&LU83]K5T6O_dZ\B\:_b.#/6()>R0&aM)t8.0;VV>Qh/5abN3g_=4%Q]JjMt;F?Wr?oe`E(c!U2
%P1+8ZTcf8[6l`X/\^#dF,?ia0S?J#*TGoZ@;comATc9"5D`f;ekmG!>.iE=Ef%>cLdZ*.HM,^=ik_<UMDbk>pjT.E/UL=3O`$#[d
%4$L4V8RC(>=J[kjQ5$ce\t+Z/(t#oa2^Ab]WuHecrBOD_UYu6S3^1+U8WI]8bui)DbG`EecMNXi%G_"M=I*0I%8&5kF)mdZ_mO3@
%3tB?*]V[,S[j<:UK@DC7n1njD9`^`Xn1W:*Qq`O:"B7kC12+;8<D(rh&@MGb9[$p1-[uW;A@S7D_T"LU)$:CPGk+?]8h'm!=GU5E
%X[(Fa`5/pVDa*7@W0q`7-P0la5J;h)%k'"KZP_&TL++MV?!p%*nQMR?rEp%N3Wu55B=`TMgYq4L7a,n_O5W,#1[Nk@Hl:^-"I-@9
%D?H9V3;H'=:n);_FL<"Q:pbt'a1X<W4+rHu/:GruLjDQWh?N)/.)D5)!Q2@YWs9OS%]j/J)BRW)cq#?j*Dd*e-/jamhF,h@l-i@2
%U)<Nd86DY/qb7%d=JpZIhjD1XL6O,<7nsc^@jW'kY[&.[B/t`I`8Vj=1be8B2N'8q;E9Da.prJQB+^73a5"JC(7`kgQru[/9.iqP
%f2"p[/TTL@/J6hQf5[*JlL@'0k23r*(o7q!e`#`_JtS+%,R;c;X:0+j5k!)l,nT8SA0aHs-"P)*)Du2&@]^crgHo2u[R5g-Lm99!
%%#d_Uc6@"oUanfbKP2]])71th1Y`5s4\1-sABWXA-GcC8Q]bp;$0X;l(+Ci$'BGc@;.#uVUR4t@)ajB*\qYs"oM!"#?Vd`->h*Fu
%Qj&M%0e?!h&gjK,*gtfMGLJJJ1hKDaj(oRL%jlkh.HF<VY%35WXcqlN$7*h)D4WF^N1=`C\p&fVBs@7b\Pc.[q%)LFduoFp6.\][
%Ja&u8'4?k^ra$"Ck6iHR;cROC?rAgBgi@AgQ<Un[(KaDB72TDrA>l"4"P\ta.JZbDJi"=kQo&1a9@A@tQ[>tkV4%PlOMOLpi<`-[
%=rQ6"%r<,<997N6=9`1LQsYFLXj<@F"c5\+aTUfbD[.SkU[4EZ/3'U@T`Js+*g[_s"CmNGcC9?HJd4*lcpEZ9-N[JU<\0Gt+%/O,
%]I,=_5--M/o37RI1aLh##"BI>U+/GI7+[QX:Fc/]5JN[b_2t-gI6EP`C1BVY&#?%QZ6HL?$Nt3Da$:N>_:J*0NP5bds6p,Oh);]<
%J^@8bi]J0UPiJPbTmMNh>>AhZOKrtfHo%u68Hqo]8h`J\/D::o`WO\6idab^:e@3Q?c_\ec2nmsfHn'N;\MFDo(,Er5a[4EkR)=V
%n>!s8'9F&ud__dgJ!ctW0n!gAYC=sLQ;f9.gVGVc<J@"gW>dlh_M>tM+@H5K7qD0VK2^JShiV?72Ed$,0_q+j"Nr(P!<#bS?%a.8
%*[JqL3NRV-=pR?LL;;gMBp,4%.5;AY2^JY0N,,r:Xo#i+J.-34eb!^N--N%H*e4G^8=!Y)Yple&g@.5g-mCKk$C@:P8&RfV$TYUO
%oSnrp%lB$/</=?!`6Ac6f=CN"=K!&3FpZ2_O;O.9g,A;6Lg1q[,TP7J3ClIJ]#UZ)&9H*h*Z>mkLsU0#JH8^3TnEqCc9'K'E=g1m
%e)d[+#Ji+3I9puJn+bouLBrhor$Cm=0bL:E*[p57c8!A,\0/[$O?jIDgR*Ts@7`1s&4)G3cVT3<i5_S>"Q9=\$asf1EKB0P!Tkeg
%#-E*T&94Jn3<^YcjYZO=$JP%3ZQO"k6QH5If/Y:ZBORBTqqf+^U+d"=k0#:'%,872?s4P)nHfD7,F7En5+"li;,*KR0PmuA\>6qf
%(h=_0d//YO#u\J8P(r<7RQ-On$n'qEP!=]D=O=KN'1n=QL*'TodoMETRi5jq!kpr\T[CRjlNDAp/l:?HOj"j%cU25_>3LR$GPI#*
%(dn6_U]i-rVINheU4>"h_G[X]a/7pF-;LleF%\Hd#m79'K"/NdPN&M]d.2mQK\]gua,$$NO'=$grmMYNn<u!JY\pEc>#L`P"U2uc
%h7=CV9;tZ5HEfPD/mT:2)<GNGEm?3\]H@X;O?r;RPR^u[ASNB>[EpWU;s_>l`!f/a5W:#.a"nS4Bfg95+ISHn&gYhkrU<idqWDjp
%0HR#%Z#oEWOWhVVaEi%Y)Aj7pqJE\<1GH[s$\/_eeKo=*@Fj_OLYolu,(q%OC&1u>.4eE(8^,!&1!M+s'5#32e$>^uBp-tMAro1_
%&Q&T_,t-q4n,j`!"R!!pki`_C@qq--*,(?U'+8:5T]u2Ba,:!SE"*S;c'_fHJBU<OH8rG-naBWm/<al)i/EbC:4n=7h:sq[&:ns1
%K"/k+-s;F^$B51(/NA/e'_cLd)'Hh=]78X8EW6<H6U']tMRn9oF8(_,;K:1![0oMF=-G=Vj3g'Kb:R$cJh7BFOGUW"F:6G6kSb&K
%P1LbN_]cLiM9^P?n6!L-Ypg>cq1hhG0f)%!84*q30Vp9VBNHqZ\Um^],r3'/ahJ=iatYnne^pskD>C`E5uHa,gfnuFpr3EU+6](N
%ZLM:>'L6BNF-$gd9eu8"qBF9)K1rY4A,@X6Nlh4#A?\5MR:![,JBl>L^/RDD#I:LDL.9Ms9Z+>X1`>4IQ;is#&<%<-e,<7u>U)bD
%Kgq3ha2jBko;@(>-Zr7:Ij(=)9t^i+BbRh!)Lei7L5oS\Q7u#;CZ8b5fNu>jn0lZ`R2c9f;>`2i<&QN*%l>iAK4n6">4e#URcJs]
%Fb2n$,Zi#P&*c"D+HIpE<,aIHG*ktLMFYj>r1XZWr)BCunX8q^g9G04=Bl5/:b)m_N4K+.ggY`6W%E*Uh^NNGqgK;-r62*/i1$BI
%<QjlIFc7FIL'usQju']VDgR4\`8T&;-6M_C%pm6U.]T*o)D$-&#PnB;l=EtfXE!4V%Fg%fgd))Z62kC.I0qf+T_sZms"m]J6i)qV
%9I&See*2UZRbj9SF?(WV%-HCRNc&f69K`YZ,nC\A1Okp_5s[0;*8UJD%ue"TC`?_^Jd2rIhPA(4+V6\?T%aB\[W[ahd#SX!1ZR]/
%/guV*7MXN6B^d4E-6r:O>(qp""W>;Ok2a.P'5SKc&4T-PD@:h$M*H`>`3#/041%sqXZ0-AF7A5nisu9q:L$rI,YT5Lh;WE+$kgY^
%.^=_U2\ZH)@*B1E1$,iK`[9R30F^UnCP\#<#9.`s=WfXO9Ob."QttV!Y,_GG*X\?oBT!/Vg,<WBfD;c"FcL+1\mt%_KePqV/LlbG
%)PqRfiP?K4eENos!m>6Y*<W_PnsWuLQ6.hS6rUg$$oVTX+*/!9BN%4s)?kBe9uk'WB`@6NN$]rIJtbbcD!U;*FO5Y5Se-2,D"o8?
%ILsgOV*g-=)Hm"C/g#0H:kd>\2:,9Tk@iARX:]0\.j'*e/2NqS4SL17(cg&AK[;^Eja,S=)f:r#iLZW33jhhe<Z8)X("(FUH5=`i
%>;U%sBmn1k<P3smgMFo1>>,INP"K[q5-DQ)R&q,>k\mFHm$"B#h:;mG+5H)7DBRU%ILbFPUK3DA';gcBW0:D/f-l'[K[T6PH8@$0
%Ei_@Sh?%2&p_rA^?s[(i\F=/80==,%UZ4['0W%)G>ZR^ScX1Y+!VM#j'/h,V&uH)9"Rn8H[DD*L!3k4n./8">$(1,7ng!;D:J.Z^
%6g^+IYL1&_VgkU^+!,e'[KK?3-U:7TMB9:_:c"2cN4rm*579XQK)6JtAfID0.O#`h0q_q^?1Jn:$q$.O8HXpGa77[!P$tCZFtDOY
%ChfL&%Sps+=:-m3;qJ"ki7]:#D#\>pfN!]I]9?kGDj!tqn3-j2-V)ui,?,p=9??g8"(XTT?;X2KDZ<fEWLB%`4I\j%UP#6g2?aT+
%OI5+Jm2`$s$I):^MH@5dOU"Me<eR1DB?:VfO@bKt8AAPeFF,4"bG.?:j4578pk./E$RgT?-HD3HA('&6_+gmM]^l:/5+D+n!)*jN
%Y5u6IbRN[eTGfZ3nkYZ5@jE_35,F%%+`l(%mblh-/7QI_ND#U8n2M4<IK$L*^t960f9SodGg9u<Q;=9k=DXJ`ijR]nA;7[?Df.%C
%@'-/UQ=;$HNY+aLYL"tj'7%b&e8sa`H;U7?l*M`NA9+9/M=2ncLK"p(qs#lf@Vt@PVrM0!-TVZp2Aqq$20mCR1q\c:EsF%eL1`!N
%I'pu"ji^O*#/ZNueC3#6s!ghT:6gW1FP;ltR=lQ'-4h#RoLhDB<WiFA_Et_XZlrQj*Vj)2.d'R:+mG<\X8]]l-gaF0nDe]]HqX[$
%$K&WFJkA^,KVc<G:4:USVNkc+8"u-ZJFT;K)daVi.Cd%_BB(uh*^:jnP4</p*f!mS&Fd1Shjga@@oU$V*.3[IOJhXNPM=I5RQP/S
%BN7*r5s%WHAc+%qT_L]TM:*0Z+'FaX?bq:M=<mSt"siCXar%6i)1GDW'c[uL"EsED":(^[8P'+dh6LT'MiB/gbY17HDa8HRe#:Qj
%Ipg9P)c`HVe/sJ2N)O9[=)b@@3`@"-n'BB`<G0GD9c1]*Z;9D@.&WFT%54mfRPW"-S/=Y/TL04L#>'D3:Q\!le@;h/1&qao6;@JP
%N0"u.Va]n"%,J\!k)f&_OHgG\!XVj@g5tgC&t&?FMJ;^?2FFArA)AJ"rJY3]0N^gN96LV/q'\;RTf[>*gi9Na4t_dNAf,Rj90MV9
%U$])>K0([+51;)*9,U1r,>D"q#3hVQ,kd8H:o02b.$bESe*-k;"<DDZe/jXCFD'Mn=(hXlbZkaY?3nf7Zm7[u(Ud,ZKI(a4X-8!#
%:af/aLkYp=TGj#s@%n$]Hr<#En];+tHMM6o@(rm-,V4Q3JR"oG&7p`7'WD::3l6Ap3_lDDAc\c[6k6.f]W7`g6O"oi:'@es,s<P.
%LE';lOql0+N\^nf?KNNs1G2$P\f7-Z)d'$c-O1?>j9^dJ]C6&sEHrGD%k)u0[=Dc)^K+k)[*TfOV0&\JTbb]18coNT4Gg;F%9P^?
%PDCs?'HnbI,-[_s0n0m6`97V&88SiH]/4em&PiMuS]SPc*NI?>`"8!R%sU)^])\]V"<OXsXNcCPSH>#j]KQX4e9rd?Ma#fn'[Y%#
%+<VVemPo=0LKGY2Y6fZ_259C2\g359EA6#Nc_@WeN#S)g,aeO+TM(eP]SbZpo6\),WCKo)6"aSu)T*4*[%DtL$I.(W076V@>rAuc
%ZU>668tj!bb*?i&JY"IS=DMrYnReu@r3:G/0LMMR5bfd50G;V@W'e$T=Xd`,d_!,q-nG^1'?iq\"D-B)E&eB@&PSk"l`6XKf'spf
%O=?V6B*rPu(t;8TD^7+orODe":5ofG@0ts&!/si-Ns0h]X@*pg/km#.TlYbFX-2tfKapAa?HsIt@u'e(D7&hhCBOM`nc7CAi?eqZ
%4A?=b6Ja>LO`*,].q=7.M&JV,*'s<M0VVChNkkHKK%ZimDkt7%Ep,uRE9("#TP<sLURX#!4iDft9AiGAid_?3R@omu$e`$ZXsSn#
%VWGiPG&c40em;_p>o"N85\gFHKoWDL+#N89+;GD_b:ki3!^gr1Y[TUBN;Q%6'=JWH*@BKJN[-]VmcMtp3kDE@@2.B$1f00R3E2jj
%"Q!=,X?`Fg3V#oU%1@"+e5(X8M:=RR7A!3kB0ceQ:69&QOpmH5aNeja8mlo27#&tZZ@4s;#DNZ=i^g,j-CrF#Wm>&/l2_nA*=u^7
%HKZ:@N>k#onH(uKk@i*&"jeo?BK(3CE-2G>S]%s1Ipp,>CP3'4nALLe/n5NJ0ER]lAq5(RV%X6GI>rUl[-q\`ht@MjY/0VA&uXR1
%`aF*[8=FDk(ThMdJ08t-s4]WE(<`lH$GRPX+6pi'(Q3FN4?C=[6^*07%"8PX/K@-c']_fYs*aT"k$7dgX1D&u.TmB=`fau*^%]+A
%Go:Zs'2M9?gXO_fG<WrTWjtaMe^R.s70BH^4l)X=+j+(,FjPZ6k=d/H?eME/i7/aOn^Ge&AG6hA%g,R#!kZ@2NM8Rb3BGJ,SbLb(
%j$_3Yh;^CGOYcKZ:K"XmImR`+8e>l`dBXq?`@.lEf<8.(V4]dee^cbCD%J1QLL[V(NP%#Bh1jEF9ARK[%+8@Y#*.KtMkT:la8([n
%gX!`=l*6^I0m+^\:'/>[43<9dfk5D/pAV"$\(TFtVQqGB/S8(77Z-N#)r&ihHOjT`dA:!5j3@3ch&LT6Ao\PAHl\[,CI@qtcMGqc
%\dd@^dXa(\Ruog1%6h;Y<^_'C=hI,c)O/mR>7C:2)KAjKP.2*#PG9ra[[kj2dI=a*7L["m_hd;k<rh6B[$F8iZl'+?>bfR=VNal?
%D7448=mITiK6=<g;*J:-ApEq_a3*MqGcZgQ^J*JK"(,W0HfK1Jai'J_K%IdbG8$gQm00r2%0'Iuq^U)PHK1d*]HM%?ehAD#5Pbof
%cu@G1+B2>C$YV+YOXb^17a!EDC&3WBj_.:fQYbEPr]>.nICYIgPH-Q_qa#At5q/?57n*=Rk^-mqo$(CB<8Jt*p3LGqCPE(00:EM<
%a7,_`DYoS)^%kN:kQtc%]\dJQB)N3dCS.KP,Q\\552P@`OA8\iqeq['VcTEX,;O.:!gH%Y!gft]q*5#h.MqA#7V"a,Sg*5a=6SV?
%f%0f6.UDf!j:YEi(bAk@<kMDj[]Aa>-!s3^ps`]3caI3d`Ksjn*6MsTnPU0Q"D;/Pn'n?&V&LQh16+\F*F*=CZSlRZ8fclV"P[-*
%hY1R6Ot"pmQEZb14H-n1;8M:3A_Cr/o"kHZD,#]s-?n-@[J?HDTAlpnmIZCMCjg\*`=`h@>._XYfl6H"HLg_T>K5:oo_R[CQ\RM+
%o_^m95GOOW!#W'l2oXMLRX4rh?[l9bcs*ID_<0dUVW&\@kUG]ACT*$JRD7C,-C'_Z4)i+R:"7u`FP)0tgTB;cc[NIhJ<&KrMp?P)
%&u4)B*5>8P%D$4Kp7Gm-o>=aWo[CL/l[@r%IQkgNTYoS%Ycb5js2nT:I#(Fsm78d22RG>FLWg22[WV$]ldKp$"i/8RgkpZ5"Nkaf
%JYU%&2f`mpX-iJW\13FVZ%Kl812<J4X)JXWE764\^Z]3$L^jH#32_XjCEMl?H-trdd7i&LP)XSL*r>m.BT!T_G%$@C8T.?IROfL(
%gki<-i\mjdT13hd4#9"B$/#U(2Mr4^r:(K&2k+YbVFRHgKGa3McqI79.qK?Xq9im9`MUJEKR6TV""S;djT6*</m[85Fo&'2=e$_3
%O#<&*$-o!\ib"qS"j6j&.\>_m>HP-^aZ;Cc11*5%6hpYePohV.@mL82elQ-6-$]_K'@MK>(H=ia&c*%J`e)H8dOLI;RqT*Ra$M-U
%7BhCh^O)2C&,T@_g!,,,#5f<epL@9Caqc3?"B^1iA-eNl@4&7jJ;6O?(H\EC,pSWhdao"(#[V%8Z%Q"Y7H6Ep+OtH<+Sg.,D)Q55
%T.B"WDI:am@UE3#&g)R!7ai4:j)'%KI*gh&E3".5lFI9rW_D+IR]7>#Y:*Hl'gI5%[fm$_cO>T?U<EYmHT'>\)fQOCcC3G-JO:UK
%^hJ`!U7-8XGm$SlU5'G?]Do]&D)OU/LaU'VO2OdS)65fM!]2GA);&!d#`iO2(0gHp<&k6i61N"'-+3Ikl0lMeJnNR&k>*,^MlR!H
%6[?@"(%$ut?\;,f8Z<<o*FWEhd1%*E0p>OF.ONU*koo@B0p3WEmio>KOGgdN'E3jTB#Q#?is23@VP@D1LTZYSP7hD5ZZ8U0[Q,@O
%j9O(GpoTBiQDY6p0bT?7rVAoL+(*7]EhRo7XAU=*$;K/=7!=EBo[lZYYQ>;]k`eqD$s"[U'i9H7Y,n[4fgLDF!588l!NNjq*k4OK
%-?6!p9hMXH<):*8o'XQ]cI$bc5Z&`,((Ag^k[.)rG5P,hK`\0obeA$N&ZmMf#!m\t<;3[Fj+gP",a]/t]hQ_r;RY8e"Le!k*gFiL
%?d@L%r%O=(,atbZ!jBRA#:@h2egaO/:Ld#$\YpQPVNB9LK+(4&Z&)%uCB!PB=$P4>&]HV#>FH60ZSlb]A2!Dcc,TCZD'tcPD]qWN
%%Ncc*(G.p#nm(dS^3oZRN<#!1]m`TqMl!jiE*IH2@\%Xe5D/>/bJ'FgE<UQ8Q:@,HKQu@^bBH1u#Z=NgQ0-ap_RQ+]V3lI!b"5;;
%llJK=7ot=0RX<Lq:S*0ie+0SH^A?s'q8g[*LDA^Tqg2)S6U7UbMg'%t#]>QGOODngihm+[j3gnHn;Tjb/[D'[flfl=Q#q'YEuKig
%jRGW3loE.tG5+nPi9`o?%SbYgmn_ZPMq-=nrKGFp)`IYV8Ei,5dQt<#8h<?AGjiN0WHdn!iCj'@>`S'>mK)GF5+*19S^l\+^A[K;
%=-#;'3crfD31=3HeD]<"Ib`Gb+3ol1:U<+;dZKg_T05",->J<?>PM>gI4M_C/NjE4gQS2e!E(e8dhbhCgsYFSM-8gZBK%SQGdsU9
%T47COiHVkTGkO-bXmbYVNVF$\H#RihqpYQdJlcru$'NN-`hdP'On@U[Af`fA5!/f5B&D6`f:_XO_3o%Zo("32Mdb/<g_;:G7.1ti
%k6#mG"?0KfTqu"+d)TQuYc&:9?h+/;,86EuAAD<)M&HEW:#tSs4<&RPna-%sQB/f6D"<n!LF_clo5b*bnFVjkMdu5-7cM>A,Cs"M
%`4)Y39]7Uu&jc]+,F)'W9Un\6=tNd(XpE-\L)gAlc_,?92PQ%d9LB$47ML\\)ZMA1kH1M#T37j7c`mbTo-.)!\4UOB@Zr6S,8oMg
%fpL;-HS__\]g"]dOeq'KR-UX^j#X/)#pbOoFalGQLLiEWrFVB-8e7NYKt)osiluT$XBoG,\aQWa#rU%>Q4JfSc*\>&?'YQ/4#%"8
%<g<Oa&clK@cVAOI!D[V'05J]\Fp`NX2?"/B^@rZm*KpdFGW'T?KD_f`C:C-*Io\?kHI3tD@_Di'`$sjoZ"38o;te!"!4''5Y.Dl:
%\6(Zg-4WkQRS4Y.;'=go:M5rhdf@GPZ\l"5RLetu+:EY-`)YYli$5+Y$L"E!+j4Y56BlbUCol[<^o?Y%=kXuREI/mf,(c+3)^d;?
%UNrK`DKMLV_#(F`X-8#XDV7,*k3V8@G;dZ@cg(rjN+9&%%C+*'hEmn)ZJ?[NlEM\k1S6Y8U:I."qkB).1ChE)\/Q0^MI,qX&[`Q]
%q4p::TM_I`EcF>=[a?[AhR402/HDnm4>'M&1GEt)9E9gI%C"EL1S3djiC1K1KDa;XiBb62\o($)$09Qg/?$9pnhAc,+5g$jXCM[/
%Z-&V8DHbVKgC-jW#X"d%3IDc*fP+nKWBN$7GX!.FB.kc;CZ.OkiNa(bW7LA^1#!4<+MCY-'OYbX>eXF;COG\LN#-?1:AU[^fE::W
%XTlAj(MeH?cH3jeQEf#5gf`D+MaJjKi/6^O0l(KPUn,HdX8eoncXn7E!"@UUh;Cjg>M32@_Tpm)#:H6TV?@14)IaS.I]Lm]jN=^$
%^-DBRmp1PZi;epf5NaF2?_f%#PcS$\.*8oGiZkmgo?c\dOdl!:mI?uW!a_:ImM2o&:g@&-A)6p+nhu%u1P=D1X:cup7RfNOqh]@\
%,;B(f^%K@LCl"S/?);ibZ+.(\m.&=gpYTrjc)#DZb95;iMMuX>I]5;(<$4QiU]3(gh)L%RL6b"UlV[#FM=k7nauWGeq^"gr.B"o2
%#5LGX%$UAWGV3caPB*?C86,!.I-bY>3cX0?q<37qEK-LhVpHH'-8_3P8s4`_M3N\[inR6K"]Sk>>:SOa/1&/Td:>C"lTF03j<S9'
%PhN+f=1+X2a!qkU6kg?*&VtD1D%"p.eT;Eu",D);h*-bHRAbtsQM[2S,.07m`=l6B=8h&ug4\Z*<>b)L)UrJT=GY#V*F%jR/j!N9
%XDM1(VLBgd:tmso<(JY-h*Dq'Jp^lXZ.P1G"U'+492?&KO4RV4Cb1GOA@q/GaYj!\-]W/?_GN><@CK\Th3Ff[c)>kDU0;r4B=<<5
%lf*T`ho`fnGeEl\B<Jpa*T#Aj[)$Wd"LrOB<kD.jko,XX/[-&s>-rBVlC'+i[jd(eq^]^O<`($6DZ9=>8hD4SG4l'e)^S%t1R$-f
%[+0PM`o_a6L+iK'3b*i.6+ic]^A<V0YdMeV5l40oT?S1o.aKnWHkR,lm8JQ!`!BMA0MX:ijJ?;c8NZb6eej^9cV!B[\*]JQS?Qc1
%rj?u%f(hs^Vh4S7.YFp\HC)=."DL&cTjR4t]o/S<bnf4t&]:<*F="%"M2MB+^ep;]m/9NQQh5:R5!EKR$TQVal":JMDpWt.VrQ>m
%SkAa+*klY3O,NP@cU"!RrI57M-q"jt[@b'XPjsXk-gVi_0D(:]d#kr2ULNJ76eA9dhtX"Zo>EM46bdi33+X_6>.Lis*lVjDSnce?
%Q3::&YOf^:3a^no7oPbNMN/=>_]9c:Po5oPY,eAliuaaSkZk3RE%UTZ#4"`]Qc:Wn02[c,>F-0I$=]'k01D//D%B-R>,(bh*E_<D
%CM`!UncGiL\h:aIkXaiQ>5*c0<t?@u`-Z,-?TJV<jf%$[F[Q4b:Qh*[C1qH?1WXq@RGT#D%+nAQm^Sr8GMaDp$FH^kp=Hi:@X0,:
%]))Bd1AhC5*J8`r?c:3/'reWsiXD#1?nD@0W"``<ILW>NAb(f@0lG!N'Bn1+2!mnl,\sG#9dF)\],^t9P:B4;eX[g=Z[k;WMbg@*
%M>OVu*IUpd#/j*eO8OG5LRZ]+OI2n(W1:;_P\S[K9C<+]cG7-)r-kkGM/jW2N,F*Z'&4iBo>Z<47P\V8>g<<>HEZ0W\+Ps)hi5,@
%\b@%$e>n5$5J2(tq=2u9eK=2r;P(X=:p9Uh/c4\\7Q!C-p@mHlqoqKh1$hYtB1XjjSfm%ofae\++LB5\@+60sRgueX%8XP-%X:`j
%VB3[-K8\oiAAI15DGXc<^d+'Fg9O&=fiW:k=Q.%h>!nq%o2Dt8[.:>E?0)]1\3^7fNR\;;?H[IpV,\1-hs$]8ib]mk)o.q/fBp\9
%[#'Aj%r'KBXTk=2O^5d(M5/iOPcI_>'A44']sKfKN+<]rU;eb3mIb]RaU?B0eC%(BTa4hUi^geLCrY]3$K6P4T6NJc.q*$7#>q,O
%(,GWkE;E)aeeEY[+<%;l$33o,5VdNEd0Y'9N>@u`<cVP8</gN:!(+kSBT_*c*)r;\AD?<$"M8F/jk]$h`Fb?llGd"cn68o1g/I31
%0S%?Co5&+%GH+]TrT?pdH9>c8\cI"P+T'P7W:jZl:^tY47?K.3qi`*I7J64&g97G-,Z7@N4%7hS'piJO2;],C'?N\$<.m%!6)'M^
%%nB65=cs%pX8#H+j&Zp#!UjXi$N.<bVA3\l385C;Egs1d(d,uoL<h"Z02iI?]>uKJ"HMgSn_mZd5=GmJ3cmBc7GW#X>a$qSU.5B]
%0tk(C95PHH<?0pc6*>'D/4EhYng`,0+bS,26-,$jQ_BZgg^MFK:EoaR6kCp1;(s]cn0OT7]<S[f4KJga^')d9.?i0q3k@^5a*):4
%BgX<V:`c-\3NlR8*/<;C\36D%R\aACDcU]MU>qm8c@VuC0D<[tM)sO`)L$r*a)IPLkFPk3dHR(\YV\lDoE(LuY39FSFI(Y![GF%L
%&\9@hg/ZK_g=7@'e\i2"""HU2$L\X.SWUbK\r&#BOd%?YC^l@(Rq=*C_l,m;;!];\#!qALO')+[85Quej`dr&A]Qq^`4#E/7@5b)
%rVi(iX*LdH>odPUiU[:Xg<;]I/UcuG_,gI%)"+l\\pClXf!/`a?@K,Lj`<+0Xf`f5VX-8H&=6$`*f<Y1$T)kW^m4ZPoe1D)i=#:Y
%+'=*=N$2]X-.:KLpku#hMfZ$H]3lWH_u5fn(TSNrSd?7(:KHl,feE1iI/)9c%%DB^KNo'W/rQidjDU$cpgbbOOZH?Dh9D@MbsU(@
%GaQ+&F>bJl_@u@H)fNn&"@lTm*c'jhIj7C>igP]P"TY?+ZlBSH&%nDHg2aV98mUVkE[VjRW`LF6e+P3$6M>YIX_F><>\V/5_Z\2h
%92Ge,PIN!2qO][Fk-?m?Rhj8]B`8O75_%:tp#M)>7PaUQcuUlmJR"?O@q?/aDC^;R@T/pF<""s[b*UV+gBb$`&82X(LXb'=4SC[g
%K%d5gd`et"g,NaN8_e]LB9d3@gnT)>M&J7^Fte^@VgKdAf.]h72!bG=<smEs@>l?JCK5YA)A-TP`3eAahiFsRgRf`7PGb+_#LV2n
%Gd`FtA_6DBbJHPD?9n:uW<g9ib&aXjT0n#Bne5hSDd4aqk*su#7=`W(XR&`B(?)afE4?4+nRO]M0mEN\lAfD`lgB:u.?`*R_$r:I
%FW;lcm$EclR'Q:#F7Mjk99sZMg;%A,?:uJ7QmtUS"P(R_e>,\SMU.Ba-<_O.qJ;;n8fjDo0^-Wd?`E]GE_l>"PdA9PHRtbKfV8I\
%$:_F6=S"&4WX^9P;aOtC:cIX(B%mF]:rRS,S.L=F.W'K'6*(40AAaBgRpWhGCe/OY9?U4u-p]#UN%pleJ1JRPh2E7Ra,7CZeFWmI
%KT8V9A*WdOFWFG3h*h]+)_&N_di`ibX.X"Il/C?$^8X;DFm2Gh]Wuc-^M!B3K"De[??"4'dL5JG7(hH\AY`3'm"M75mo`7IWilC#
%I1_/h[D1]_`#X.B?`6ngHEo83#JdC0CfB>_8tA4+D\0(%Jg%>8"9uV92!P:7M]?1sq^MBS]R)X$L?JKXLQt8"JePP\)_YCaps>m&
%?#T"h&N%!]6MeS_@jD0NV5'h$qSI6`hW-VV"+6.'P>#rcfr55`aF)I-1#%#`pdg)*:O=g=eR$+X\S4!7^Eh.8:irLBQs8_WaX%!B
%KH4W-P+<j3=%%$Eplm+UPUc&h%epFb;?psE&dY$@2"T[0o:ImIDB358TEM;^YT7;#2p&]'o?b<i\-Xq^];K"SK3bV0&A_J^.;3!Z
%=C/\7b"`)L=I27^"`2+;FJbN(0LIrG#l,1SHQS-O<]uANr=#IrPljV^YE%re1,m(4#PTcOnF$>:9KujRM7aV<^M,6u.\]2Y/Yfrs
%'g.TTp8AR38#1%jjhYh3O-9iK'PBZe:mD%bKRuriPn0-]W/8iA7?m;,9+,I`<",?R&Ak/tJj\b\g<+\!F7Q`u8T)p@HJApq*7:^@
%qJIdHeU.c.;W'HV^X2ekp^%<>GITFu\SoYQZ(2KOr&25:&X'5IR[po4'$gB<T<Q;&Tf>cI.oCGEI4Oj[j,-Iii>Q?Gc(bo@aE_tW
%0oJ9,f&)2o'm8P(]@PPG'-(?=>knM$k1t8I3HaChUECA,"$X4SosdnM7/;^=Zs%b\9>2pM9rSdVZR2R2!::a=o>)rpQf`iagZ!03
%e`j@OVRste=18%a61<Ths3R#56fs'hE%[BS$p!Hu7[It1S\+?6=:Sl7O@8h&U3QO2qN'jF`NtT>.^FQ5rV\!TFa5\<3o%mpdrGXA
%F:T_8%X5m\4XjiBH?:&UdqKcS/C6jam0kZ>Nm#hj%PtnA<N7MUaI^IV[!9!ti?_Wq%`,71.UTbkXlSP-mA,rZ>N-^Zoc37S[q6S,
%r9R:ZO]9nu&ld2^n#N.;eYB!KEX,`B3PKc`_6/aFZNo0!n#]U9p7?@7#eX.s@T)O292*^;@C7<a;'7G]h8(ft]<15ob_a<?ltE*@
%1YJXok$>ro$77/l,fVVh6d9nm64HGaCO*:X:V1qgHOOO,m[OsBRfA3REN?5j"]1IU-H9q*8-2n9(=Te4KIP*uS^Xd=m+QTO$IK*t
%f62#,)s*6F;+C:>>P&(\HRO^[f<RIFJ;e`TDo?4Ub?1`oE`dP8d-Oh%YhK:4F#mHPmE)h1L3VB@MumKeH8=gsW@WM]Z..Qe^;$[;
%)Z?Uke$?kC#a2jYPhb1ce7MAOkf_5W@$b!YML[GtB(CTJ+;53\+1)8-m%>U[5G!^O&B4E`r$;Pn%/8A#UR(9FBc!*1ED9Fk(@_83
%ZnR_antdS!2ekWJ>eIZ;GUD9oHhc#t<%c5ahUJ2.28bK*n&F"3WoRfQn%N5GIbOSb)`i!u^724Ip_<Z&(%C$Z7?:c0n%PLQ5@SLA
%I*^h%hPZt^_YZ3,!?B^C`dqQTMaE5Y(up'Oie=T"]cE#lDeW30ZlA*L__8G'jpr:)Y`]f`B4?7E`Ea)TV4]plf0?rG9D8@l$VS-M
%O!Yh7kRDJq[QI@"F<pHIXkUb4Wsau$ik;gV0-*ODEa8(H4[Q,DZB`,omBLBh^OY&`:s&^'E-o7-,Hm1L1sq-:o(K$#fj8iK]QhEq
%Gddp#>0AQP4U;F.-Mak8a&al)Wm=etq+tQm#FJg_(FL%C/-F#jN_"no`Js\bG(2E_UB^U9nY82>Z[$k`=Fo\_LWb;F\;t0>C+h-c
%5qLrb&UE`H`96(2kPa^>pAUke9D[kVZQ9i!5'd7Z\],JlJ*8":C"&2hDuS^\LMgFWe#V3XGL</d9f0jVgt'.\!WUD,>2mR+X.Q][
%Q<9=^GBVrng6nn"SMB>!RR]LlMd<n'9mo"u8sjWMShs!DpD;'bcFRIF$K4B(=m@0$Id't32QaG0`9P.uL"O"`ng,B?b;$\+'>Qd(
%oF^qgRXe#Ncf]HLT7J>^!W+1qOZ.CCDG:+;SGj4T_CK:$@VC+[^?!V\h>XB&!choQ1)M?5?/i=\p-m2,Q-hkPF1VOFfl+M"XBZ(G
%kp[SY2-QlM?3>YJjfbQ,GSemLV'_)@.OfXX3%Yl\'B*c&J9:F@7U`4OD#hrElE.r:0iArqD8LtVmH[>X*Z+3keXQ<>Yk"3Lp525(
%Z+q&AKERP@)5<;K(7o\%UJ4E=\1-VNl]HY=f[3QNFSjSI"7-\].t1)B`icA@2p8,S*fn*['XNPUcHT_Q=tGGio$T#+!jZJV+eG]E
%K:F`.Oj]A[V;eo9)^,$X?k9(R;bI<S9%iuP[qjCt9o/n*eY3\B6Pt;n[q.<C=5\;gfgn8q70s*6DCb1afs=4[1^Lr@Lb]L'4!b%1
%b=K7J;eE4fWbUVkXPf!\)+XpV1Eo;HqiRLLL@^2EC&eH133FgB6;V1%3"?O-P.0&Kj+K\D3AA7si/iX]79boe<iYttm8.3Se:K''
%QR^k/8h=>S?-l$V9;Y&!U9/:lVI2r+O[OPBTG#o'k4CV+;#9&H:m-Go]&d6`ZIY;*3+7.$j'h&c29Vcrlqp1,##C2.OM!G;E+j)d
%dJGdMh3\Fe0A<(L,ZQr7qf;Og[["RgaOi1-*[XjE#%SIbW_b"7ddj)+_q6[U-f_0tXO_+QbkuRjC"m"Oe#_h=aQ?;.X4aSk\$b$?
%P//(/]G_O0'K3&8e<.e-F>3el5X#Nl.H`\EWg=e&V8Eu$T'RP2n?g?EQ2<+1JTReeo.;g_O/NmO4Iubb&KSC1l70k'@*Ees1mR2\
%G/30'D8<i$Ro"N[okaMTMlEVV4[(EX%a)eg!&Z-0>'P[O,?b]AWD]-7dCKeM7Ml7n5@/9oZ[k*!l=ui]9BUWejV]J1V$K-D6)fPi
%W2m_d7[ZF@q&*.>)r**He,IWtWZC@[h0#f:#>_Td+]p>(f""3cAd\HgOE2*n1k60\JTP-?9<:[rB%Gq3.,t!_onL3X<-Ip-m//E;
%cg*T)0*cJP:9tm>qDN_@-3k)0.psR0@;lTtXZ"A?e7D.,\p"W6;3==ZXLB=d@ITdeCRJ,8(+7uC3g0\)aadF9".Uh.V^+1_8f.tm
%#`A%gX7T?aH)\7=.BFdUk:7Qtp:?1C`:Yil*1FV^M@]FkL%#LJ`Ju%)SR!eK*]-r;U4b?T3$64Mojl5WCYmTrA8D;Imq&K)QFd0C
%)Gi*'"OES:/8XCuTt.XQJG+hCe><in_D<:"31bq#(4'5kjK`OJ&BVcj/-a:Ne<V/#7c4"rYoS;8`Mt:<R:Z@UC0csq/=@1`%YWuo
%R?G#H0<NU/g5!iI:fYdBZC']kC!'%3*!fOSYHI^;cCqt/2u@K]GZ-Z'FfHA_"0tdiX=r*YD\o.O!STY@n)(K?s(RtNC/2h;FI9gj
%gY)[[Rn-oO.duQG0kDSqGU,28DF',TfcW$j:9pC<>/?9b6uV.Zpk^9$EkE\.L)*RLN_aiF.kASLIJVneb(A22CpGnbD=\J=jm:^R
%aC89'7'0+Jg6u*KAu%(W6[ig+cg,b]"a^>o(l*76eE00`VX,JsSdWs=IQa.b)S59rAhU!"12Nj5r:H61>%Z.E^Ob,SSgt&C82Z'Q
%5u_V4Er1b='@-(3>)k;k4,mYQq?[&p8e!KL$[D\gnT_FJM,h>knXZ&5M%E;aOS6oHHbB@C=%*M]:og'O/>QLf1Yi5j*DJBtU%D>V
%[VTZri0&LIUk?@,SrPd%>H`K[[(+7m*/R\VKlqCgm>k%dqj9ic]*BQG`5h3$H[O#$\Z=OJqnr"G<"dom/p_iuALF[2=+>IQ7%"sr
%i/C5],Ag3@'tT1GamBd??taHT+g=JRd_(a>G3r_2*4cq?(9bFictJd%.n@(Yn7Zc<RVpu^=jm`GA?U$*9]d\eILKQ3W24Sa>L8=u
%Bmo@(WOP]"WD8t&B\F-ZUR/XLWk(5VSnrX37/FeaKB/7?Qc!qALSGGAD<-n13-j&DU`-[#W"==0JHV/._o562pj=B18l/ltV!I$8
%QeW8?\Ll%sa)?G%lLAeB\X<sDrTOucSY$_]q.,,L#kQj$O\]!4HQpCLA(s1cODbX!g_S_VYn)WTMH4]T"jrm1HFnrV$;#!s8Y4VA
%ps'h4G&A:i25j,Wr+/9><`8X75Xe\GNh%GAg"tP0A:ioNUCobijUl?j<mct96qf],6rpJJ/q.n^1Dc_L`@SE`P);]ig<[`Nms\2p
%mV5gn"Q?XBreJ\bpo?#/FT!.sVS2YOMZIp<M<=E!PiBQq`=A/m=Voh(8=ZTKeNrWGbckGm>HCYHWKY83Kso(l5gT?o5E-5?M'8qR
%]0s-]K,&#/X.IaN"*Om.iutorm,uRPh*5b.huBt\k9%G6bIarAIf8*kI^]W4o5A"7p$;YQm]4*>47q.>qWm%RqVgaqYJ0geH27<O
%[m*%Rot.F-r]f:hp[uG]s6JG>7D_Fh"2FZV+9(r*J,QGJ"%pBm`r~>
%AI9_PrivateDataEnd
